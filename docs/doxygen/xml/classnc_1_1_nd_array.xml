<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnc_1_1_nd_array" kind="class" language="C++" prot="public">
    <compoundname>nc::NdArray</compoundname>
    <includes refid="_nd_array_8hpp" local="no">NdArray.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>dtype</declname>
        <defname>dtype</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" prot="public" static="no">
        <type>const dtype *</type>
        <definition>typedef const dtype* nc::NdArray&lt; dtype &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="70" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" prot="public" static="no">
        <type>dtype *</type>
        <definition>typedef dtype* nc::NdArray&lt; dtype &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="69" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1_nd_array_1ab940a2d2e6482f6a3933348abf22b44a" prot="private" static="no" mutable="no">
        <type>dtype *</type>
        <definition>dtype* nc::NdArray&lt; dtype &gt;::array_</definition>
        <argsstring></argsstring>
        <name>array_</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="77" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a5b9593dbae087f923f95d59e3431da71" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
        <definition>Endian nc::NdArray&lt; dtype &gt;::endianess_</definition>
        <argsstring></argsstring>
        <name>endianess_</name>
        <initializer>{ <ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152af78504d96ba7177dc0c6784905ac8743" kindref="member">Endian::NATIVE</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="76" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a37dfaff915e516abc70324026ec1dbc9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype &gt;::ownsPtr_</definition>
        <argsstring></argsstring>
        <name>ownsPtr_</name>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="78" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a29072a43431fda30b3ef0cc46c1aee09" prot="private" static="no" mutable="no">
        <type><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape nc::NdArray&lt; dtype &gt;::shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <initializer>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="74" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a85db9a1c421a05191048a31ef03b4c5f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="75" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6142678be814c9c60843dd0dca623f88" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::deleteArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>deleteArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes the internal array </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="84" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="84" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5b697c0900a93b8e418b87f3e491bb61" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::newArray</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>newArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new internal array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="104" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="104" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1_nd_array_1af8dcd9ba696d8f162f17d007a70b678b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>()=default</argsstring>
        <name>NdArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defualt Constructor, not very usefull... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad332591aab4b5ae4b761b414b7ef32bc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(uint32 inSquareSize) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para>square number of rows and columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="129" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7d77d17c6fa5795e3c54f743ab65bfc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="143" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a029fa6529449ac3c01eefa6520910f8b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="157" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae67291e792c9460c7f78fc9e6308deee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const std::initializer_list&lt; dtype &gt; &amp;inList) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::initializer_list&lt; dtype &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="171" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa04abd2ad7ff2b1edefb9f0c5b5fa760" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; dtype &gt; &gt; &amp;inList)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; dtype &gt; &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para>2D initializer list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="187" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="187" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5f47ce8361209bdc57ab5e0f227593c4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const std::vector&lt; dtype &gt; &amp;inVector) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::vector&lt; dtype &gt; &amp;</type>
          <declname>inVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVector</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="222" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="222" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad907e56e90ada1857309ecef9e2b5633" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const std::deque&lt; dtype &gt; &amp;inDeque) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::deque&lt; dtype &gt; &amp;</type>
          <declname>inDeque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inDeque</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="238" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a67eca413c109e6c68ef4d85b3e4bb0a6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const std::set&lt; dtype &gt; &amp;inSet) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::set&lt; dtype &gt; &amp;</type>
          <declname>inSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSet</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="254" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="254" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2ea48602d358f67c7af016de78dc8d4a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const_iterator inFirst, const_iterator inLast) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
          <declname>inFirst</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
          <declname>inLast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFirst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLast</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="270" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac0bf7318787d59d060531bfaca75bf72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(dtype *inPtr, uint32 numRows, uint32 numCols, bool takeOwnership=false) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>dtype *</type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>numRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>numCols</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeOwnership</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Operates as a shell around an already existing array of data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>dtype* to beginning of the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numRows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numCols</parametername>
</parameternamelist>
<parameterdescription>
<para>the nubmer of column in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>takeOwnership</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to take ownership of the data and call delete[] in the destructor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="290" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a703abfd03c5de2f54aa55094f0b036ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(dtype *inPtr, uint32 inNumBytes) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>dtype *</type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Copies the contents of the buffer into the array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>dtype* to beginning of buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="305" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="305" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abd9007fe02f21bcc010c2f6b44e6cd68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="321" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="321" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a59f268663dba2d3a5a0c2ad3460f33b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::NdArray</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;&amp;inOtherArray) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;&amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="338" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="338" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ade583169fd89c4a64a961583851fa78b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype &gt;::~NdArray</definition>
        <argsstring>()</argsstring>
        <name>~NdArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="353" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a92737efa2e525a62ad07e63534bd8e36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::all</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>all</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if all elements evaluate to True or non zero</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.all.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.all.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1052" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1052" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abe14645f18b0cf6b62e622f0db0624e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::any</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>any</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if any elements evaluate to True or non zero</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1103" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1103" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa5266474ab548ecfc80cb6a30001c797" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype &gt;::argmax</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>argmax</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return indices of the maximum values along the given axis. Only the first index is returned.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1155" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1155" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac9d8a31bc6539479176a8894411286db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype &gt;::argmin</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>argmin</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return indices of the minimum values along the given axis. Only the first index is returned.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1205" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1205" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa290cea4123e76ea8165d2dde8974b2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype &gt;::argsort</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>argsort</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices that would sort this array.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argsort.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argsort.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1254" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1254" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a89184343c8eef94fc7353a620aa2edfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt;dtypeOut&gt; nc::NdArray&lt; dtype &gt;::astype</definition>
        <argsstring>() const noexcept</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1323" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1323" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae6c1faadee65ae35236c3551784cd5f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype &amp;</type>
        <definition>dtype&amp; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(int32 inIndex)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="705" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="705" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9117ab9464a51b264ceda106c4eca505" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const dtype &amp;</type>
        <definition>const dtype&amp; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(int32 inIndex) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="728" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="728" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6264f04fea2a2d9a4589f752fdb52f43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype &amp;</type>
        <definition>dtype&amp; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="751" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="751" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a472e831a3b2ed98eb470e969c210aae4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const dtype &amp;</type>
        <definition>const dtype&amp; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="783" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="783" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a46ce833b863055c81d59c27ef93107e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(const Slice &amp;inSlice) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="815" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="815" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a72b7c1674558c69a2a1102652901bcd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="831" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="831" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a976b7768fe9ddaa6ca50d66ba4ed7ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="847" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a02c013952d6f2435cfdf520589c610b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::at</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="863" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="863" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a94c5752747b9b937c092632af9c7a7aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::NdArray&lt; dtype &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the last element of the flattened array.</para><para><simplesect kind="return"><para>dtype </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1339" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1339" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the beginning of the flattened array None <simplesect kind="return"><para>iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="876" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="876" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7e4010114ca11be6e10903ab4bd4d9dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype &gt;::begin</definition>
        <argsstring>(uint32 inRow)</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the beginning of the input row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="890" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="890" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6f07a76eefb244f4ca794bd9e8b9132c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array None <simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="906" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a03da861520e1abcfc06d0d2ff1282626" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::begin</definition>
        <argsstring>(uint32 inRow) const</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="920" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="920" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acfd8c01c4c79bda25e1796a51aea2a30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::byteswap</definition>
        <argsstring>() noexcept</argsstring>
        <name>byteswap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap the bytes of the array elements in place</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.byteswap.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.byteswap.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1353" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1353" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array</para><para><simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="987" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="987" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa75d85def3d58bfb531a6e2626cd7799" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::cbegin</definition>
        <argsstring>(uint32 inRow) const</argsstring>
        <name>cbegin</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1001" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1001" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the flattened array</para><para><simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1018" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1018" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a72e0f298458da1647e3ecedebb64cd36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::cend</definition>
        <argsstring>(uint32 inRow) const</argsstring>
        <name>cend</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the input row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1032" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1032" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abf06a319d8415dd4c61495aa67cfc0f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::clip</definition>
        <argsstring>(dtype inMin, dtype inMax) const noexcept</argsstring>
        <name>clip</name>
        <param>
          <type>dtype</type>
          <declname>inMin</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array whose values are limited to [min, max].</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.clip.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.clip.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMin</parametername>
</parameternamelist>
<parameterdescription>
<para>min value to clip to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMax</parametername>
</parameternamelist>
<parameterdescription>
<para>max value to clip to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>clipped value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1390" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1390" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aaefd65593adf81abeba6259dc0c95acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::column</definition>
        <argsstring>(uint32 inColumn)</argsstring>
        <name>column</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inColumn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full column of the array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1405" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1405" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a129666b27611423b46c05c7fdbe937d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::contains</definition>
        <argsstring>(dtype inValue, Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether or not a value is included the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1419" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1419" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aec355aa347578efbd9baceb062a145ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::copy</definition>
        <argsstring>() const noexcept</argsstring>
        <name>copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the array</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.copy.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.copy.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1467" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1467" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a377c1b5393aabc2b00496643a5c5da03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref></type>
        <definition>const Slice nc::NdArray&lt; dtype &gt;::cSlice</definition>
        <argsstring>(int32 inStartIdx=0, uint32 inStepSize=1) const noexcept</argsstring>
        <name>cSlice</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inStartIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inStepSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> object for slicing a row to the end of array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStartIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="676" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="676" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa3981c4c80a9df2155c9745f5dec3dcf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::cumprod</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>cumprod</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative product of the elements along the given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumprod.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumprod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1483" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1483" bodyend="1533"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acb502b6a54cff2c2cf82bd9d4d82aa16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::cumsum</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>cumsum</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative sum of the elements along the given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumsum.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumsum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1546" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1546" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad102f8fe8139a17ede04f83a03007bf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype *</type>
        <definition>dtype* nc::NdArray&lt; dtype &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the raw pointer to the underlying data <simplesect kind="return"><para>dtype* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1603" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1603" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa91013877b9bd37a0411167f2e8eec75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype *</type>
        <definition>dtype* nc::NdArray&lt; dtype &gt;::dataRelease</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataRelease</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases the internal data pointer so that the destructor will not call delete on it, and returns the raw pointer to the underlying data. <simplesect kind="return"><para>dtype* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1615" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1615" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a58959d58c043612b0ecb869ea5280382" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::diagonal</definition>
        <argsstring>(int32 inOffset=0, Axis inAxis=Axis::ROW) const noexcept</argsstring>
        <name>diagonal</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return specified diagonals.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.diagonal.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.diagonal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the diagonal from the main diagonal. Can be both positive and negative. Defaults to 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default ROW) axis the offset is applied to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1632" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1632" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a13e5756a193d375c0b52e5929a41ca2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::dot</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dot product of two arrays.</para><para>For 2-D arrays it is equivalent to matrix multiplication, and for 1-D arrays to inner product of vectors.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dot.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dot.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dot product </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1701" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1701" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1a75a88440cb5460da17b23e0dd6b030" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::dump</definition>
        <argsstring>(const std::string &amp;inFilename) const</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump a binary file of the array to the specified file. The array can be read back with or NC::load.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dump.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dump.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1746" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1746" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to 1 past the end of the flattened array <simplesect kind="return"><para>iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="931" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="931" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4301cb892e3fcc6017786f2f88f9ceb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype &gt;::end</definition>
        <argsstring>(uint32 inRow)</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the 1 past end of the row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="945" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="945" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1584bf57603d37fe3b3ada7003772d83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the flattened array <simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="961" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="961" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7d9b39b306a8ab172ebabb8575acd055" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype &gt;::end</definition>
        <argsstring>(uint32 inRow) const</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the 1 past end of the row</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="975" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="975" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a12ffea3b6227328c008e1a6befab091c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
        <definition>Endian nc::NdArray&lt; dtype &gt;::endianess</definition>
        <argsstring>() const noexcept</argsstring>
        <name>endianess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the NdArrays endianess</para><para><simplesect kind="return"><para>Endian </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1785" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1785" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af4df4f7926dbd7543dbf97855a71764e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::fill</definition>
        <argsstring>(dtype inFillValue) noexcept</argsstring>
        <name>fill</name>
        <param>
          <type>dtype</type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill the array with a scalar value.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.fill.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.fill.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1801" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1801" bodyend="1804"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5169b9ad613ce03c7cb748b05e978028" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::flatten</definition>
        <argsstring>() const noexcept</argsstring>
        <name>flatten</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the array collapsed into one dimension.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.flatten.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.flatten.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1815" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1815" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5173e2d0a9fe983213193d8a4dfde21c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::NdArray&lt; dtype &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the first element of the flattened array.</para><para><simplesect kind="return"><para>dtype </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1829" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1829" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0d2475dc8c8f5edb2e4c2887078b890a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::getByIndices</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices) const</argsstring>
        <name>getByIndices</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new flat array with the givin flat input indices.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1843" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1843" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2dfd7ac740d1830363949f27511b7ecc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::getByMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask) const</argsstring>
        <name>getByMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes in a boolean mask the same size as the array and returns a flattened array with the values cooresponding to the input mask.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1859" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1859" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a626fd6565a7a5cf7cf60cece6d24b9c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype &gt;::isempty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isempty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> is empty. ie the default construtor was used.</para><para><simplesect kind="return"><para>boolean </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1773" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1773" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::NdArray&lt; dtype &gt;::item</definition>
        <argsstring>() const</argsstring>
        <name>item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an element of an array to a standard C++ scalar and return it.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.item.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.item.html</ulink></para><para><simplesect kind="return"><para>array element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1873" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1873" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::max</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum along a given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.max.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.max.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1898" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1898" bodyend="1935"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6e6476097ba788402df110a2a3e8e12a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::NdArray&lt; dtype &gt;::mean</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>mean</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the mean along a given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.mean.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.mean.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1998" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1998" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8c0907a69c368e28047f034ade0d3c24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::median</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>median</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the median along a given axis. Does NOT average if array has even number of elements!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2051" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2051" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7a863a1318f753addcf8163191085061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::min</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the minimum along a given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.min.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.min.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="1948" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="1948" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa086dc380cbe6461dbfeeb75edbc6961" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::nans</definition>
        <argsstring>() noexcept</argsstring>
        <name>nans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with nans; only really works with. Only really works for dtype = float/double </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2106" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2106" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ade202c90305ccd24781a9b0f8bf601a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1a25da52a834e7af0e341d1503ebb62dcd" kindref="member">uint64</ref></type>
        <definition>uint64 nc::NdArray&lt; dtype &gt;::nbytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes held by the array</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nbytes.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nbytes.html</ulink></para><para><simplesect kind="return"><para>number of bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2120" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2120" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7f0ba5d000ef7d60d51ead3d16f7046d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::newbyteorder</definition>
        <argsstring>(Endian inEndianess) const noexcept</argsstring>
        <name>newbyteorder</name>
        <param>
          <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
          <declname>inEndianess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the array with the same data viewed with a different byte order. only works for integer types, floating point types will not compile and you will be confused as to why...</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.newbyteorder.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.newbyteorder.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inEndianess</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2139" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2139" bodyend="2250"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad092326b66dc867003251e80d649a771" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype &gt;::nonzero</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nonzero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the indices of the flattened array of the elements that are non-zero.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nonzero.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nonzero.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2262" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2262" bodyend="2276"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9a8b5063ec64c9d0d9afdce057db77ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::NdArray&lt; dtype &gt;::norm</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the norm of the array</para><para>Numpy Reference: <ulink url="http://www.numpy.org/devdocs/reference/generated/numpy.linalg.norm.html?highlight=norm#numpy.linalg.norm">http://www.numpy.org/devdocs/reference/generated/numpy.linalg.norm.html?highlight=norm#numpy.linalg.norm</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>norm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2289" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2289" bodyend="2341"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a13ddcb6c2ace15a7a4ada6982bc9c982" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype &gt;::numCols</definition>
        <argsstring>() noexcept</argsstring>
        <name>numCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of columns in the array</para><para><simplesect kind="return"><para>uint32 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2351" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2351" bodyend="2354"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab0e399408388daf11ac4877c6e9d4e69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype &gt;::numRows</definition>
        <argsstring>() noexcept</argsstring>
        <name>numRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of rows in the array</para><para><simplesect kind="return"><para>uint32 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2364" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2364" bodyend="2367"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3ad9db206f43e27769e72752261c695c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::ones</definition>
        <argsstring>() noexcept</argsstring>
        <name>ones</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with ones </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2374" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2374" bodyend="2377"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad6126ddd6bd25c0821a6002feb2ed007" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator&amp;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise and of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4005" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4005" bodyend="4008"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a13e0e9ac60605abb1cc3dc4f9c2eab1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator&amp;</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise and of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4019" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4019" bodyend="4022"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8e8cae9fde408b0f2a2b0ca8bedd1bf1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator&amp;&amp;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator &amp;&amp;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the and of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4149" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4149" bodyend="4161"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8e4ef0dd2abccf8e738c6462bd134639" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator&amp;&amp;</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator &amp;&amp;</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the and of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4172" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4172" bodyend="4179"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a657b10894e5c11c8b949722c9b8c2f29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator&amp;=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise and of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4033" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4033" bodyend="4046"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2bb99626e8dbddc421ca8022bca49a89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator&amp;=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise and of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4057" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4057" bodyend="4066"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac576e580370f003d80f545027c422cb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator!</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator!</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the not of the array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4248" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4248" bodyend="4255"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6cee50dbf89bea309f8af19d7847bbf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator!=</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4309" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4309" bodyend="4316"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a45b178ca03b18e4dd1175d7b222d9ae2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator!=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4328" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4328" bodyend="4339"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a36aa02595a666afa6810a25c09374efd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator%</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the modulus of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3856" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3856" bodyend="3859"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae94fb3ebe25ace690404c4de742b5448" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator%</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator%</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modulus of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3870" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3870" bodyend="3873"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a88cfa37a618c6f437b77a727b5cc2e91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator%=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator%=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the modulus of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3884" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3884" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aecc0fc99888ccdb921fe6691d69ed26c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator%=</definition>
        <argsstring>(dtype inScalar)</argsstring>
        <name>operator%=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modulus of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3908" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3908" bodyend="3922"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa1c1a56d402b0f43745c075ff42f5bcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype &amp;</type>
        <definition>dtype&amp; nc::NdArray&lt; dtype &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D access operator with no bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="469" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="469" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aba9d02408b06e5dea7b9d41ff1a1f5a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const dtype &amp;</type>
        <definition>const dtype&amp; nc::NdArray&lt; dtype &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access operator with no bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="493" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="493" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a75cee1d3c0ab6d48dad3eb95a704a588" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator()</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="594" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="594" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a30841d8244125731bde781c92b34f306" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator()</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="626" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="626" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9168972c601d3b3a72eafae43eb69d51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="651" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="651" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a76ff2ee85dc1d422d6355844ed87caaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator*</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3724" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3724" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af7c6b2021ff4ebd8c056071539e8fffb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator*</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Muliplies the scalar to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3738" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3738" bodyend="3741"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a95e0153d10e40f4b4d9f8460e90bd71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator*=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3752" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3752" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5f13117e7b55ccb967b516254e43fc5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator*=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Muliplies the scalar to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3773" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3773" bodyend="3779"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aacc70bcd544fd3b6d1d0a8231a72842f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator+</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3580" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3580" bodyend="3583"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa1fdebb4c0e3b05ab7fc281240e17f53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator+</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the scalar to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3594" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3594" bodyend="3597"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a13bd5eb6445df85e5ded6867efb3731a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prefix incraments the elements of an array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4583" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4583" bodyend="4588"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4bf97703eb224b0f5794bf02a940ca8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator++</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>postfix increments the elements of an array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4611" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4611" bodyend="4617"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abe57d4fe2ffc190ca4bafe9f46cc8532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator+=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3608" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3608" bodyend="3618"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a04e488dc23b79c7c6af5246305918807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator+=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the scalar to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3629" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3629" bodyend="3635"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7b8bd6756f2daa640408cfac5bc480ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Negative Operator</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3644" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3644" bodyend="3647"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a66d44478475f9fd63b0ccb2d2c6b2d7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator-</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3658" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3658" bodyend="3661"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a130bf931e0f0c1b2651cc82b05fbb38a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator-</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the scalar from the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3672" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3672" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a387cc67611f5deb901123f62817f1cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator--</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prefix decrements the elements of an array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4597" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4597" bodyend="4602"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0d3748ca1860d35fe70597b0fb2a9dbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator--</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>postfix decrements the elements of an array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4626" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4626" bodyend="4632"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa7db834322ded2db89712958b954d535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator-=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3686" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3686" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6551aec9fb92e160827a907c4f316a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator-=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the scalar from the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3707" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3707" bodyend="3713"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a91e1fad172dd7147c290024c8ef159e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator/</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3790" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3790" bodyend="3793"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac1130c6a443457ba43fc17fd7d2f7cff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator/</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the array by the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3804" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3804" bodyend="3807"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a49aad23b831a9becaa290f12d1967aca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator/=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3818" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3818" bodyend="3828"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0e6a612dae7632b812b4ec3a3bd71e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator/=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides the array by the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3839" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3839" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7f16311f0f40732c3d752e21d458f650" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&lt;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4328" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4370" bodyend="4381"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad964b305a18868ac79eddf5a14dc6eda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&lt;</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison the array and a scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4328" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4351" bodyend="4358"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab62598fdae08e17f824595e86fd5849e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&lt;=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4412" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4454" bodyend="4465"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a501b3af93ae33b596c04cee9f7644900" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&lt;=</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison the array and a scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4412" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4435" bodyend="4442"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1adb463d5b2ede1f5ec6bbc3c2dd14a9b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator, performs a deep copy</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;dtype&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="367" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aab95b0c84c9d440fdc0204f5e784e9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator=</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator, sets the entire array to a single scalar value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;dtype&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="387" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="387" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa3e015371a5ef964e02214c626239226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator=</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;&amp;inOtherArray) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;&amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move operator, performs a deep move</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;dtype&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="403" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="403" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a685d3d57378c68ce00cddc70098a2906" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator==</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4267" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4267" bodyend="4274"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aff3eca5a9f1ce47edf7021478ac870f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator==</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4286" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4286" bodyend="4297"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae2f4b364cb1f44467cd8905bbb17e107" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&gt;</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison the array and a scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4393" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4393" bodyend="4400"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aac4b8798d2dcfb4620e7eba0fbe44775" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&gt;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4412" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4412" bodyend="4423"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0ffcfbc90b57af4e6569da29a8a161df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&gt;=</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison the array and a scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4477" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4477" bodyend="4484"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aeded04a47fe2793e8f928326cee6f317" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype &gt;::operator&gt;=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of booleans of element wise comparison of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4496" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4496" bodyend="4507"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abe3ca5292febb4c5b157f941656b982f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype &amp;</type>
        <definition>dtype&amp; nc::NdArray&lt; dtype &gt;::operator[]</definition>
        <argsstring>(int32 inIndex) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D access operator with no bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="431" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="431" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3e26e1775a3beb82345cb2d1181528f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const dtype &amp;</type>
        <definition>const dtype&amp; nc::NdArray&lt; dtype &gt;::operator[]</definition>
        <argsstring>(int32 inIndex) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access operator with no bounds checking</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="450" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="450" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae1feb9c6f69240985274a322da28f72d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator[]</definition>
        <argsstring>(const Slice &amp;inSlice) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="518" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="518" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a49e99914b34262a533f3d4dafa9890e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator[]</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the values from the input mask</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="541" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="541" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a25aa5d8342c6d5867db1352b66d3771b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator[]</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the values from the input indices</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="567" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="567" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ade0018b325eb7ea14783d81c15c6b6e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator^</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise xor of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4077" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4077" bodyend="4080"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab20dc8ea28203cc41daa5e6707122396" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator^</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise xor of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4091" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4091" bodyend="4094"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a81f28df78e67bec044b3c8b058c8a239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator^=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise xor of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4105" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4105" bodyend="4118"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a23910aafe888bb38557d28c019fc6d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator^=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator^=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise xor of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4129" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4129" bodyend="4138"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0e3dae7fa99d4d97f8ff47b56b60fd89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator|</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise or of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3933" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3933" bodyend="3936"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab8fdd23aa82b97035987bfbd7fbc99cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator|</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise or of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3947" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3947" bodyend="3950"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5046cde3a10a74fc3f65b4a6344d6490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator|=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise or of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3961" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3961" bodyend="3974"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1f338fba16d572c164bec5f3b612cbb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::operator|=</definition>
        <argsstring>(dtype inScalar) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise or of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3985" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3985" bodyend="3994"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae35d258c24cf04249112036149884f16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator||</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the or of the elements of two arrays</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4190" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4190" bodyend="4202"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7ef658cab756e04dd9eff7e7c5ba5eaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator||</definition>
        <argsstring>(dtype inScalar) const noexcept</argsstring>
        <name>operator||</name>
        <param>
          <type>dtype</type>
          <declname>inScalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the or of the array and the scalar</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inScalar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4213" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4213" bodyend="4220"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aacdd70ae438820c0e12f22b579e35faa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::operator~</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the bitwise not of the array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4229" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4229" bodyend="4239"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2fe5e5e6e6844dcc8576c597285c994f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype &gt;::ownsInternalData</definition>
        <argsstring>() noexcept</argsstring>
        <name>ownsInternalData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the array object owns the underlying data</para><para><simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2385" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2385" bodyend="2388"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1afe2a5101c43fc9b3df55500364dfe477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::partition</definition>
        <argsstring>(uint32 inKth, Axis inAxis=Axis::NONE)</argsstring>
        <name>partition</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inKth</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rearranges the elements in the array in such a way that value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.partition.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.partition.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inKth</parametername>
</parameternamelist>
<parameterdescription>
<para>kth element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2406" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2406" bodyend="2454"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a510b5d39a07a35208cf23142a440fede" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::print</definition>
        <argsstring>() const noexcept</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the array to the console. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2461" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2461" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aea4d359f558a7d463a843c147bc2a948" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::prod</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the product of the array elements over the given axis</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.prod.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.prod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2477" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2477" bodyend="2518"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae90b5d8ba2a2466c40a1fd374b69598b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::ptp</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>ptp</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Peak to peak (maximum - minimum) value along a given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.ptp.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.ptp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2531" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2531" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1afe758ef8867d56964efc5a67bf17e726" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(int32 inIndex, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the flat index element to the value</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2582" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2582" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8725317fe7e637119df82f50dbacc157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(int32 inRow, int32 inCol, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRow</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inCol</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the 2D row/col index element to the value</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2599" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2599" bodyend="2604"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae3c2fb9ef470a0c6d03dcfef09545039" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a.flat[n] = values for all n in indices.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2615" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2615" bodyend="2623"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a98701c9d571620ad142cf7934e174ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a.flat[n] = values[n] for all n in indices.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2634" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2634" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1accd8527a65838cd0f4292b3dcb763b60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inSlice, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2659" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2659" bodyend="2670"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae6c5dd42c2e1e36615d4dfe2c916afff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2681" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2681" bodyend="2693"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aabbc32dbf4831ee72376fdf0d2f22b3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2705" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2705" bodyend="2723"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a21bab5f9ab83c2fd85f35bea5705f881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2735" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2735" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab8c757e2d54eaf92faf097bba0c5cd89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice, dtype inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2759" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2759" bodyend="2771"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a719f94b4172d43a59fe6406c69ce1a61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2783" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2783" bodyend="2802"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a78c996f5b0e4cdaa1ad7718509255f80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2814" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2814" bodyend="2827"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a223415dda1b4b8d70b140d947784362c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::put</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2839" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2839" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a15899cfb75a560409f474826d960fec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::putMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask, dtype inValue)</argsstring>
        <name>putMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mask indices to the input value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2861" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2861" bodyend="2869"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a801c9b8cb11f1e87d377d0587c358dba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype &gt;::putMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>putMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mask indices to the input values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2878" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2878" bodyend="2886"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ada6c26cecef37f5db019011b458a6c12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::repeat</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) const noexcept</argsstring>
        <name>repeat</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2899" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2899" bodyend="2929"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a775b416ccd90497951c25029ad932c2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::repeat</definition>
        <argsstring>(const Shape &amp;inRepeatShape) const noexcept</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inRepeatShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRepeatShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2942" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2942" bodyend="2945"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a597b9157af97d8be0d38403639aa4b02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::reshape</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols)</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes the array to a new shape.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2956" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2956" bodyend="2967"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7ca330bab82607c59533526d710934ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::reshape</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>reshape</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes the array to a new shape.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2978" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2978" bodyend="2981"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a840391eb35aa00abef21132db0fdb6c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::resizeFast</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>resizeFast</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="2993" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="2993" bodyend="2997"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7ad0dade90a29ff329c565515c7f8122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::resizeFast</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>resizeFast</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3009" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3009" bodyend="3012"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5b886044df5232dc1ba6a8e01c92c9dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::resizeSlow</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>resizeSlow</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3026" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3026" bodyend="3050"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a358cee90c1763477d9aff546811a9e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::resizeSlow</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>resizeSlow</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3064" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3064" bodyend="3067"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6d2ac80b2f7b1fa818e33bd03d66a224" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::NdArray&lt; dtype &gt;::rms</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>rms</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the root mean square (RMS) along a given axis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3078" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3078" bodyend="3126"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3f1c7b94cf5f2b2beb961ef426e0e29f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::round</definition>
        <argsstring>(uint8 inNumDecimals=0) const noexcept</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a with each element rounded to the given number of decimals.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.round.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.round.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3140" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3140" bodyend="3157"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a72747c61318537694bf9a7a594075c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::row</definition>
        <argsstring>(uint32 inRow)</argsstring>
        <name>row</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full row of the array</para><para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3167" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3167" bodyend="3170"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aea1061c8c6954ca960412a7f4b323405" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref></type>
        <definition>const Slice nc::NdArray&lt; dtype &gt;::rSlice</definition>
        <argsstring>(int32 inStartIdx=0, uint32 inStepSize=1) const noexcept</argsstring>
        <name>rSlice</name>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inStartIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inStepSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> object for slicing a column to the end of the array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStartIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="691" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="691" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape nc::NdArray&lt; dtype &gt;::shape</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the shape of the array</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.shape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.shape.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3181" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3181" bodyend="3184"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the size of the array</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.size.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.size.html</ulink></para><para><simplesect kind="return"><para>size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3195" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3195" bodyend="3198"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0022f6849d04ff050f9c795477e98333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::sort</definition>
        <argsstring>(Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort an array, in-place.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sort.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sort.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3211" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3211" bodyend="3239"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a276df134adac8fb7304bc951ef639b45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::NdArray&lt; dtype &gt;::stdev</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>stdev</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the std along a given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.std.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.std.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3252" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3252" bodyend="3307"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab2daa76c0c35263c3426a29c832a6149" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nc::NdArray&lt; dtype &gt;::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> as a string representation</para><para><simplesect kind="return"><para>string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3316" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3316" bodyend="3339"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab1dfe260680abf6a8cc4fdf56c1b15c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::sum</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum of the array elements over the given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sum.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3352" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3352" bodyend="3390"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a843ebed50d1fae2993e4716e0adf17ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::swapaxes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>swapaxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interchange two axes of an array. Equivalent to transpose...</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.swapaxes.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.swapaxes.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3401" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3401" bodyend="3404"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa94662d12c0f3558fa78344c8cfe95cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::tofile</definition>
        <argsstring>(const std::string &amp;inFilename, const std::string &amp;inSep=&quot;&quot;) const</argsstring>
        <name>tofile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inSep</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write array to a file as text or binary (default).. The data produced by this method can be recovered using the function <ref refid="namespacenc_1ae299ba41f67aeade5634e93fd8b417c9" kindref="member">fromfile()</ref>.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.tofile.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.tofile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator between array items for text output. If &quot;&quot; (empty), a binary file is written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3419" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3419" bodyend="3451"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7fb4764e4f24c72c6299f0142d394070" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; dtype &gt;</type>
        <definition>std::vector&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::toStlVector</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toStlVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write flattened array to an STL vector</para><para><simplesect kind="return"><para>std::vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3460" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3460" bodyend="3463"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af46899aa9486c6189a0db53228774f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::NdArray&lt; dtype &gt;::trace</definition>
        <argsstring>(uint32 inOffset=0, Axis inAxis=Axis::ROW) const noexcept</argsstring>
        <name>trace</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum along diagonals of the array.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.trace.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.trace.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the diagonal from the main diagonal. Can be both positive and negative. Defaults to 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default ROW) Axis to offset from</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3477" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3477" bodyend="3518"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype &gt;::transpose</definition>
        <argsstring>() const noexcept</argsstring>
        <name>transpose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tranpose the rows and columns of an array</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.transpose.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.transpose.html</ulink></para><para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3529" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3529" bodyend="3540"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a24135dd7a7713cb02ac260e70d458e23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::NdArray&lt; dtype &gt;::var</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const noexcept</argsstring>
        <name>var</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the variance of the array elements, along given axis.</para><para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.var.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.var.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3553" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3553" bodyend="3559"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype &gt;::zeros</definition>
        <argsstring>()</argsstring>
        <name>zeros</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with zeros </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="3566" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="3566" bodyend="3569"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnc_1_1_nd_array_1a170dc61a0cd543daa68cfecd25cebca5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; operator&lt;&lt;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;lhs, uint8 inNumBits) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitshifts left the elements of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4518" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4518" bodyend="4523"/>
      </memberdef>
      <memberdef kind="friend" id="classnc_1_1_nd_array_1a22fa91d095c1044202c5121061fb40d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;inOStream, const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>inOStream</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>io operator for the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> class</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOStream</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4643" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4643" bodyend="4647"/>
      </memberdef>
      <memberdef kind="friend" id="classnc_1_1_nd_array_1a11fba5aefbd51f7620a095a4c6c5fdb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; operator&lt;&lt;=</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;lhs, uint8 inNumBits) noexcept</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitshifts left the elements of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4534" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4534" bodyend="4540"/>
      </memberdef>
      <memberdef kind="friend" id="classnc_1_1_nd_array_1a0059889b043023155f45773e3db57c87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; operator&gt;&gt;</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;lhs, uint8 inNumBits) noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitshifts right the elements of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4551" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4551" bodyend="4556"/>
      </memberdef>
      <memberdef kind="friend" id="classnc_1_1_nd_array_1ad5ebb2eafaf761d9a79baaea7938dbc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; operator&gt;&gt;=</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;lhs, uint8 inNumBits) noexcept</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitshifts right the elements of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="4567" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="4567" bodyend="4573"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Holds 1D and 2D arrays, the main work horse of the NumCpp library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="24">
        <label>nc::NdArray&lt; dtype &gt;</label>
        <link refid="classnc_1_1_nd_array"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" line="66" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/NdArray.hpp" bodystart="65" bodyend="4648"/>
    <listofallmembers>
      <member refid="classnc_1_1_nd_array_1a92737efa2e525a62ad07e63534bd8e36" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>all</name></member>
      <member refid="classnc_1_1_nd_array_1abe14645f18b0cf6b62e622f0db0624e0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>any</name></member>
      <member refid="classnc_1_1_nd_array_1aa5266474ab548ecfc80cb6a30001c797" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argmax</name></member>
      <member refid="classnc_1_1_nd_array_1ac9d8a31bc6539479176a8894411286db" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argmin</name></member>
      <member refid="classnc_1_1_nd_array_1aa290cea4123e76ea8165d2dde8974b2d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argsort</name></member>
      <member refid="classnc_1_1_nd_array_1ab940a2d2e6482f6a3933348abf22b44a" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>array_</name></member>
      <member refid="classnc_1_1_nd_array_1a89184343c8eef94fc7353a620aa2edfc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>astype</name></member>
      <member refid="classnc_1_1_nd_array_1ae6c1faadee65ae35236c3551784cd5f1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a9117ab9464a51b264ceda106c4eca505" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a6264f04fea2a2d9a4589f752fdb52f43" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a472e831a3b2ed98eb470e969c210aae4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a46ce833b863055c81d59c27ef93107e8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a72b7c1674558c69a2a1102652901bcd3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a976b7768fe9ddaa6ca50d66ba4ed7ed4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a02c013952d6f2435cfdf520589c610b6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a94c5752747b9b937c092632af9c7a7aa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>back</name></member>
      <member refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1a7e4010114ca11be6e10903ab4bd4d9dd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1a6f07a76eefb244f4ca794bd9e8b9132c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1a03da861520e1abcfc06d0d2ff1282626" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1acfd8c01c4c79bda25e1796a51aea2a30" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>byteswap</name></member>
      <member refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cbegin</name></member>
      <member refid="classnc_1_1_nd_array_1aa75d85def3d58bfb531a6e2626cd7799" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cend</name></member>
      <member refid="classnc_1_1_nd_array_1a72e0f298458da1647e3ecedebb64cd36" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cend</name></member>
      <member refid="classnc_1_1_nd_array_1abf06a319d8415dd4c61495aa67cfc0f1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>clip</name></member>
      <member refid="classnc_1_1_nd_array_1aaefd65593adf81abeba6259dc0c95acd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>column</name></member>
      <member refid="classnc_1_1_nd_array_1a314e112215cfe6abdba35adf0998899b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a129666b27611423b46c05c7fdbe937d4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>contains</name></member>
      <member refid="classnc_1_1_nd_array_1aec355aa347578efbd9baceb062a145ae" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>copy</name></member>
      <member refid="classnc_1_1_nd_array_1a377c1b5393aabc2b00496643a5c5da03" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cSlice</name></member>
      <member refid="classnc_1_1_nd_array_1aa3981c4c80a9df2155c9745f5dec3dcf" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cumprod</name></member>
      <member refid="classnc_1_1_nd_array_1acb502b6a54cff2c2cf82bd9d4d82aa16" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cumsum</name></member>
      <member refid="classnc_1_1_nd_array_1ad102f8fe8139a17ede04f83a03007bf3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>data</name></member>
      <member refid="classnc_1_1_nd_array_1aa91013877b9bd37a0411167f2e8eec75" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dataRelease</name></member>
      <member refid="classnc_1_1_nd_array_1a6142678be814c9c60843dd0dca623f88" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>deleteArray</name></member>
      <member refid="classnc_1_1_nd_array_1a58959d58c043612b0ecb869ea5280382" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>diagonal</name></member>
      <member refid="classnc_1_1_nd_array_1a13e5756a193d375c0b52e5929a41ca2f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dot</name></member>
      <member refid="classnc_1_1_nd_array_1a1a75a88440cb5460da17b23e0dd6b030" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dump</name></member>
      <member refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a4301cb892e3fcc6017786f2f88f9ceb9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a1584bf57603d37fe3b3ada7003772d83" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a7d9b39b306a8ab172ebabb8575acd055" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a12ffea3b6227328c008e1a6befab091c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>endianess</name></member>
      <member refid="classnc_1_1_nd_array_1a5b9593dbae087f923f95d59e3431da71" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>endianess_</name></member>
      <member refid="classnc_1_1_nd_array_1af4df4f7926dbd7543dbf97855a71764e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>fill</name></member>
      <member refid="classnc_1_1_nd_array_1a5169b9ad613ce03c7cb748b05e978028" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>flatten</name></member>
      <member refid="classnc_1_1_nd_array_1a5173e2d0a9fe983213193d8a4dfde21c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>front</name></member>
      <member refid="classnc_1_1_nd_array_1a0d2475dc8c8f5edb2e4c2887078b890a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>getByIndices</name></member>
      <member refid="classnc_1_1_nd_array_1a2dfd7ac740d1830363949f27511b7ecc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>getByMask</name></member>
      <member refid="classnc_1_1_nd_array_1a626fd6565a7a5cf7cf60cece6d24b9c7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>isempty</name></member>
      <member refid="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>item</name></member>
      <member refid="classnc_1_1_nd_array_1af5fd346e89b4a6117ed4a2296fe68959" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>max</name></member>
      <member refid="classnc_1_1_nd_array_1a6e6476097ba788402df110a2a3e8e12a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>mean</name></member>
      <member refid="classnc_1_1_nd_array_1a8c0907a69c368e28047f034ade0d3c24" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>median</name></member>
      <member refid="classnc_1_1_nd_array_1a7a863a1318f753addcf8163191085061" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>min</name></member>
      <member refid="classnc_1_1_nd_array_1aa086dc380cbe6461dbfeeb75edbc6961" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nans</name></member>
      <member refid="classnc_1_1_nd_array_1ade202c90305ccd24781a9b0f8bf601a8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nbytes</name></member>
      <member refid="classnc_1_1_nd_array_1af8dcd9ba696d8f162f17d007a70b678b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad332591aab4b5ae4b761b414b7ef32bc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a7d77d17c6fa5795e3c54f743ab65bfc3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a029fa6529449ac3c01eefa6520910f8b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ae67291e792c9460c7f78fc9e6308deee" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1aa04abd2ad7ff2b1edefb9f0c5b5fa760" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a5f47ce8361209bdc57ab5e0f227593c4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad907e56e90ada1857309ecef9e2b5633" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a67eca413c109e6c68ef4d85b3e4bb0a6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a2ea48602d358f67c7af016de78dc8d4a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ac0bf7318787d59d060531bfaca75bf72" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a703abfd03c5de2f54aa55094f0b036ee" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1abd9007fe02f21bcc010c2f6b44e6cd68" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a59f268663dba2d3a5a0c2ad3460f33b6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a5b697c0900a93b8e418b87f3e491bb61" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>newArray</name></member>
      <member refid="classnc_1_1_nd_array_1a7f0ba5d000ef7d60d51ead3d16f7046d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>newbyteorder</name></member>
      <member refid="classnc_1_1_nd_array_1ad092326b66dc867003251e80d649a771" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nonzero</name></member>
      <member refid="classnc_1_1_nd_array_1a9a8b5063ec64c9d0d9afdce057db77ea" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>norm</name></member>
      <member refid="classnc_1_1_nd_array_1a13ddcb6c2ace15a7a4ada6982bc9c982" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>numCols</name></member>
      <member refid="classnc_1_1_nd_array_1ab0e399408388daf11ac4877c6e9d4e69" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>numRows</name></member>
      <member refid="classnc_1_1_nd_array_1a3ad9db206f43e27769e72752261c695c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ones</name></member>
      <member refid="classnc_1_1_nd_array_1ad6126ddd6bd25c0821a6002feb2ed007" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;</name></member>
      <member refid="classnc_1_1_nd_array_1a13e0e9ac60605abb1cc3dc4f9c2eab1c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;</name></member>
      <member refid="classnc_1_1_nd_array_1a8e8cae9fde408b0f2a2b0ca8bedd1bf1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;&amp;</name></member>
      <member refid="classnc_1_1_nd_array_1a8e4ef0dd2abccf8e738c6462bd134639" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;&amp;</name></member>
      <member refid="classnc_1_1_nd_array_1a657b10894e5c11c8b949722c9b8c2f29" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;=</name></member>
      <member refid="classnc_1_1_nd_array_1a2bb99626e8dbddc421ca8022bca49a89" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator &amp;=</name></member>
      <member refid="classnc_1_1_nd_array_1ac576e580370f003d80f545027c422cb0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator!</name></member>
      <member refid="classnc_1_1_nd_array_1a6cee50dbf89bea309f8af19d7847bbf2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator!=</name></member>
      <member refid="classnc_1_1_nd_array_1a45b178ca03b18e4dd1175d7b222d9ae2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator!=</name></member>
      <member refid="classnc_1_1_nd_array_1a36aa02595a666afa6810a25c09374efd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator%</name></member>
      <member refid="classnc_1_1_nd_array_1ae94fb3ebe25ace690404c4de742b5448" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator%</name></member>
      <member refid="classnc_1_1_nd_array_1a88cfa37a618c6f437b77a727b5cc2e91" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator%=</name></member>
      <member refid="classnc_1_1_nd_array_1aecc0fc99888ccdb921fe6691d69ed26c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator%=</name></member>
      <member refid="classnc_1_1_nd_array_1aa1c1a56d402b0f43745c075ff42f5bcb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1aba9d02408b06e5dea7b9d41ff1a1f5a0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1a75cee1d3c0ab6d48dad3eb95a704a588" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1a30841d8244125731bde781c92b34f306" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1a9168972c601d3b3a72eafae43eb69d51" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1a76ff2ee85dc1d422d6355844ed87caaf" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator*</name></member>
      <member refid="classnc_1_1_nd_array_1af7c6b2021ff4ebd8c056071539e8fffb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator*</name></member>
      <member refid="classnc_1_1_nd_array_1a95e0153d10e40f4b4d9f8460e90bd71e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator*=</name></member>
      <member refid="classnc_1_1_nd_array_1a5f13117e7b55ccb967b516254e43fc5f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator*=</name></member>
      <member refid="classnc_1_1_nd_array_1aacc70bcd544fd3b6d1d0a8231a72842f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator+</name></member>
      <member refid="classnc_1_1_nd_array_1aa1fdebb4c0e3b05ab7fc281240e17f53" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator+</name></member>
      <member refid="classnc_1_1_nd_array_1a13bd5eb6445df85e5ded6867efb3731a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator++</name></member>
      <member refid="classnc_1_1_nd_array_1a4bf97703eb224b0f5794bf02a940ca8d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator++</name></member>
      <member refid="classnc_1_1_nd_array_1abe57d4fe2ffc190ca4bafe9f46cc8532" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator+=</name></member>
      <member refid="classnc_1_1_nd_array_1a04e488dc23b79c7c6af5246305918807" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator+=</name></member>
      <member refid="classnc_1_1_nd_array_1a7b8bd6756f2daa640408cfac5bc480ee" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator-</name></member>
      <member refid="classnc_1_1_nd_array_1a66d44478475f9fd63b0ccb2d2c6b2d7f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator-</name></member>
      <member refid="classnc_1_1_nd_array_1a130bf931e0f0c1b2651cc82b05fbb38a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator-</name></member>
      <member refid="classnc_1_1_nd_array_1a387cc67611f5deb901123f62817f1cd9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator--</name></member>
      <member refid="classnc_1_1_nd_array_1a0d3748ca1860d35fe70597b0fb2a9dbb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator--</name></member>
      <member refid="classnc_1_1_nd_array_1aa7db834322ded2db89712958b954d535" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator-=</name></member>
      <member refid="classnc_1_1_nd_array_1a6551aec9fb92e160827a907c4f316a12" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator-=</name></member>
      <member refid="classnc_1_1_nd_array_1a91e1fad172dd7147c290024c8ef159e6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator/</name></member>
      <member refid="classnc_1_1_nd_array_1ac1130c6a443457ba43fc17fd7d2f7cff" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator/</name></member>
      <member refid="classnc_1_1_nd_array_1a49aad23b831a9becaa290f12d1967aca" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator/=</name></member>
      <member refid="classnc_1_1_nd_array_1a0e6a612dae7632b812b4ec3a3bd71e22" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator/=</name></member>
      <member refid="classnc_1_1_nd_array_1ad964b305a18868ac79eddf5a14dc6eda" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;</name></member>
      <member refid="classnc_1_1_nd_array_1a7f16311f0f40732c3d752e21d458f650" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;</name></member>
      <member refid="classnc_1_1_nd_array_1a170dc61a0cd543daa68cfecd25cebca5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnc_1_1_nd_array_1a22fa91d095c1044202c5121061fb40d2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnc_1_1_nd_array_1a11fba5aefbd51f7620a095a4c6c5fdb6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classnc_1_1_nd_array_1a501b3af93ae33b596c04cee9f7644900" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;=</name></member>
      <member refid="classnc_1_1_nd_array_1ab62598fdae08e17f824595e86fd5849e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&lt;=</name></member>
      <member refid="classnc_1_1_nd_array_1adb463d5b2ede1f5ec6bbc3c2dd14a9b4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1aab95b0c84c9d440fdc0204f5e784e9ca" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1aa3e015371a5ef964e02214c626239226" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1a685d3d57378c68ce00cddc70098a2906" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator==</name></member>
      <member refid="classnc_1_1_nd_array_1aff3eca5a9f1ce47edf7021478ac870f7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator==</name></member>
      <member refid="classnc_1_1_nd_array_1ae2f4b364cb1f44467cd8905bbb17e107" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;</name></member>
      <member refid="classnc_1_1_nd_array_1aac4b8798d2dcfb4620e7eba0fbe44775" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;</name></member>
      <member refid="classnc_1_1_nd_array_1a0ffcfbc90b57af4e6569da29a8a161df" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;=</name></member>
      <member refid="classnc_1_1_nd_array_1aeded04a47fe2793e8f928326cee6f317" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;=</name></member>
      <member refid="classnc_1_1_nd_array_1a0059889b043023155f45773e3db57c87" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnc_1_1_nd_array_1ad5ebb2eafaf761d9a79baaea7938dbc5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classnc_1_1_nd_array_1abe3ca5292febb4c5b157f941656b982f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1a3e26e1775a3beb82345cb2d1181528f0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1ae1feb9c6f69240985274a322da28f72d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1a49e99914b34262a533f3d4dafa9890e3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1a25aa5d8342c6d5867db1352b66d3771b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1ade0018b325eb7ea14783d81c15c6b6e3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator^</name></member>
      <member refid="classnc_1_1_nd_array_1ab20dc8ea28203cc41daa5e6707122396" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator^</name></member>
      <member refid="classnc_1_1_nd_array_1a81f28df78e67bec044b3c8b058c8a239" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator^=</name></member>
      <member refid="classnc_1_1_nd_array_1a23910aafe888bb38557d28c019fc6d3e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator^=</name></member>
      <member refid="classnc_1_1_nd_array_1a0e3dae7fa99d4d97f8ff47b56b60fd89" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator|</name></member>
      <member refid="classnc_1_1_nd_array_1ab8fdd23aa82b97035987bfbd7fbc99cf" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator|</name></member>
      <member refid="classnc_1_1_nd_array_1a5046cde3a10a74fc3f65b4a6344d6490" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator|=</name></member>
      <member refid="classnc_1_1_nd_array_1a1f338fba16d572c164bec5f3b612cbb1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator|=</name></member>
      <member refid="classnc_1_1_nd_array_1ae35d258c24cf04249112036149884f16" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator||</name></member>
      <member refid="classnc_1_1_nd_array_1a7ef658cab756e04dd9eff7e7c5ba5eaf" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator||</name></member>
      <member refid="classnc_1_1_nd_array_1aacdd70ae438820c0e12f22b579e35faa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator~</name></member>
      <member refid="classnc_1_1_nd_array_1a2fe5e5e6e6844dcc8576c597285c994f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ownsInternalData</name></member>
      <member refid="classnc_1_1_nd_array_1a37dfaff915e516abc70324026ec1dbc9" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>ownsPtr_</name></member>
      <member refid="classnc_1_1_nd_array_1afe2a5101c43fc9b3df55500364dfe477" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>partition</name></member>
      <member refid="classnc_1_1_nd_array_1a510b5d39a07a35208cf23142a440fede" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>print</name></member>
      <member refid="classnc_1_1_nd_array_1aea4d359f558a7d463a843c147bc2a948" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>prod</name></member>
      <member refid="classnc_1_1_nd_array_1ae90b5d8ba2a2466c40a1fd374b69598b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ptp</name></member>
      <member refid="classnc_1_1_nd_array_1afe758ef8867d56964efc5a67bf17e726" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a8725317fe7e637119df82f50dbacc157" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ae3c2fb9ef470a0c6d03dcfef09545039" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a98701c9d571620ad142cf7934e174ede" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1accd8527a65838cd0f4292b3dcb763b60" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ae6c5dd42c2e1e36615d4dfe2c916afff" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1aabbc32dbf4831ee72376fdf0d2f22b3f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a21bab5f9ab83c2fd85f35bea5705f881" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ab8c757e2d54eaf92faf097bba0c5cd89" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a719f94b4172d43a59fe6406c69ce1a61" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a78c996f5b0e4cdaa1ad7718509255f80" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a223415dda1b4b8d70b140d947784362c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a15899cfb75a560409f474826d960fec2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>putMask</name></member>
      <member refid="classnc_1_1_nd_array_1a801c9b8cb11f1e87d377d0587c358dba" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>putMask</name></member>
      <member refid="classnc_1_1_nd_array_1ada6c26cecef37f5db019011b458a6c12" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>repeat</name></member>
      <member refid="classnc_1_1_nd_array_1a775b416ccd90497951c25029ad932c2c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>repeat</name></member>
      <member refid="classnc_1_1_nd_array_1a597b9157af97d8be0d38403639aa4b02" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reshape</name></member>
      <member refid="classnc_1_1_nd_array_1a7ca330bab82607c59533526d710934ba" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reshape</name></member>
      <member refid="classnc_1_1_nd_array_1a840391eb35aa00abef21132db0fdb6c5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeFast</name></member>
      <member refid="classnc_1_1_nd_array_1a7ad0dade90a29ff329c565515c7f8122" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeFast</name></member>
      <member refid="classnc_1_1_nd_array_1a5b886044df5232dc1ba6a8e01c92c9dd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeSlow</name></member>
      <member refid="classnc_1_1_nd_array_1a358cee90c1763477d9aff546811a9e55" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeSlow</name></member>
      <member refid="classnc_1_1_nd_array_1a6d2ac80b2f7b1fa818e33bd03d66a224" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rms</name></member>
      <member refid="classnc_1_1_nd_array_1a3f1c7b94cf5f2b2beb961ef426e0e29f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>round</name></member>
      <member refid="classnc_1_1_nd_array_1a72747c61318537694bf9a7a594075c78" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>row</name></member>
      <member refid="classnc_1_1_nd_array_1aea1061c8c6954ca960412a7f4b323405" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rSlice</name></member>
      <member refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>shape</name></member>
      <member refid="classnc_1_1_nd_array_1a29072a43431fda30b3ef0cc46c1aee09" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>shape_</name></member>
      <member refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>size</name></member>
      <member refid="classnc_1_1_nd_array_1a85db9a1c421a05191048a31ef03b4c5f" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>size_</name></member>
      <member refid="classnc_1_1_nd_array_1a0022f6849d04ff050f9c795477e98333" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>sort</name></member>
      <member refid="classnc_1_1_nd_array_1a276df134adac8fb7304bc951ef639b45" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>stdev</name></member>
      <member refid="classnc_1_1_nd_array_1ab2daa76c0c35263c3426a29c832a6149" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>str</name></member>
      <member refid="classnc_1_1_nd_array_1ab1dfe260680abf6a8cc4fdf56c1b15c2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>sum</name></member>
      <member refid="classnc_1_1_nd_array_1a843ebed50d1fae2993e4716e0adf17ed" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>swapaxes</name></member>
      <member refid="classnc_1_1_nd_array_1aa94662d12c0f3558fa78344c8cfe95cd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>tofile</name></member>
      <member refid="classnc_1_1_nd_array_1a7fb4764e4f24c72c6299f0142d394070" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>toStlVector</name></member>
      <member refid="classnc_1_1_nd_array_1af46899aa9486c6189a0db53228774f76" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>trace</name></member>
      <member refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>transpose</name></member>
      <member refid="classnc_1_1_nd_array_1a24135dd7a7713cb02ac260e70d458e23" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>var</name></member>
      <member refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>zeros</name></member>
      <member refid="classnc_1_1_nd_array_1ade583169fd89c4a64a961583851fa78b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>~NdArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
