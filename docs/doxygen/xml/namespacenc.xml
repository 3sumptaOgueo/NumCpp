<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacenc" kind="namespace" language="C++">
    <compoundname>nc</compoundname>
    <innerclass refid="classnc_1_1_boost_ndarray_helper" prot="public">nc::BoostNdarrayHelper</innerclass>
    <innerclass refid="classnc_1_1_data_cube" prot="public">nc::DataCube</innerclass>
    <innerclass refid="classnc_1_1_dtype_info" prot="public">nc::DtypeInfo</innerclass>
    <innerclass refid="classnc_1_1_nd_array" prot="public">nc::NdArray</innerclass>
    <innerclass refid="classnc_1_1_poly1d" prot="public">nc::Poly1d</innerclass>
    <innerclass refid="classnc_1_1_random" prot="public">nc::Random</innerclass>
    <innerclass refid="classnc_1_1_shape" prot="public">nc::Shape</innerclass>
    <innerclass refid="classnc_1_1_slice" prot="public">nc::Slice</innerclass>
    <innerclass refid="classnc_1_1_timer" prot="public">nc::Timer</innerclass>
    <innernamespace refid="namespacenc_1_1constants">nc::constants</innernamespace>
    <innernamespace refid="namespacenc_1_1coordinates">nc::coordinates</innernamespace>
    <innernamespace refid="namespacenc_1_1fft">nc::fft</innernamespace>
    <innernamespace refid="namespacenc_1_1filter">nc::filter</innernamespace>
    <innernamespace refid="namespacenc_1_1image_processing">nc::imageProcessing</innernamespace>
    <innernamespace refid="namespacenc_1_1linalg">nc::linalg</innernamespace>
    <innernamespace refid="namespacenc_1_1polynomial">nc::polynomial</innernamespace>
    <innernamespace refid="namespacenc_1_1rotations">nc::rotations</innernamespace>
    <innernamespace refid="namespacenc_1_1utils">nc::utils</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" prot="public" static="no" strong="yes">
        <type></type>
        <name>Axis</name>
        <enumvalue id="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" prot="public">
          <name>NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" prot="public">
          <name>ROW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84aa44a065875f5d66d41474bb9bfb0ce05" prot="public">
          <name>COL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum To describe an axis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="47" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" prot="public" static="no" strong="yes">
        <type></type>
        <name>Endian</name>
        <enumvalue id="namespacenc_1a8dcbcb343147d09e74689ad8a2586152af78504d96ba7177dc0c6784905ac8743" prot="public">
          <name>NATIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenc_1a8dcbcb343147d09e74689ad8a2586152aa60c6c694491d75b439073b8cb05b139" prot="public">
          <name>BIG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenc_1a8dcbcb343147d09e74689ad8a2586152a1314341b466dcb5e2c880b76414c49fe" prot="public">
          <name>LITTLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for endianess. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="51" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenc_1abd2ee82bb59dd1ace46a8d8d493e947b" prot="public" static="no" strong="yes">
        <type></type>
        <name>Order</name>
        <enumvalue id="namespacenc_1abd2ee82bb59dd1ace46a8d8d493e947ba800618943025315f869e4e1f09471012" prot="public">
          <name>F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenc_1abd2ee82bb59dd1ace46a8d8d493e947ba0d61f8370cad1d412f80b84d143e1257" prot="public">
          <name>C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>C or Fortran ordering from python. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/BoostNumpyNdarrayHelper.hpp" line="49" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/BoostNumpyNdarrayHelper.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacenc_1a7ef41205a09ddd32ee926953ad8145c1" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t nc::int16</definition>
        <argsstring></argsstring>
        <name>int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="38" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t nc::int32</definition>
        <argsstring></argsstring>
        <name>int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="37" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1a84c132684426d342ab833e05286fea3b" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t nc::int64</definition>
        <argsstring></argsstring>
        <name>int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="36" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1a0002211f73639f83890a15f3e9ba0fba" prot="public" static="no">
        <type>int8_t</type>
        <definition>typedef int8_t nc::int8</definition>
        <argsstring></argsstring>
        <name>int8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="39" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1a58dcfca0b29c16ffb4ca118b2a1cb399" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t nc::uint16</definition>
        <argsstring></argsstring>
        <name>uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="42" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nc::uint32</definition>
        <argsstring></argsstring>
        <name>uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="41" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1a25da52a834e7af0e341d1503ebb62dcd" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t nc::uint64</definition>
        <argsstring></argsstring>
        <name>uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="40" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t nc::uint8</definition>
        <argsstring></argsstring>
        <name>uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" line="43" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Types.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacenc_1ac1a8cfb8f9378e1c4da7bc09e93cb77a" prot="public" static="yes" mutable="no">
        <type>std::mt19937_64</type>
        <definition>std::mt19937_64 nc::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <briefdescription>
<para>generator function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" line="48" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Random.hpp" bodystart="48" bodyend="-1"/>
        <referencedby refid="classnc_1_1_random_1a11b3ea85e8fb4c86365107b95b313b44" compoundref="_random_8hpp" startline="66" endline="84">nc::Random&lt; dtype &gt;::bernoulli</referencedby>
        <referencedby refid="classnc_1_1_random_1a236668f625cd32cbea5288c5eaf54f7c" compoundref="_random_8hpp" startline="99" endline="124">nc::Random&lt; dtype &gt;::beta</referencedby>
        <referencedby refid="classnc_1_1_random_1a71c188103a657ffca2cdc774f10b0401" compoundref="_random_8hpp" startline="139" endline="167">nc::Random&lt; dtype &gt;::binomial</referencedby>
        <referencedby refid="classnc_1_1_random_1abb4faf51dcca8ae9759b1262d64d7963" compoundref="_random_8hpp" startline="181" endline="199">nc::Random&lt; dtype &gt;::chiSquare</referencedby>
        <referencedby refid="classnc_1_1_random_1a4581af3814e86dc1747c9551be235f6f" compoundref="_random_8hpp" startline="248" endline="266">nc::Random&lt; dtype &gt;::cauchy</referencedby>
        <referencedby refid="classnc_1_1_random_1ac012f79d1cf5bb09a8557e338c222719" compoundref="_random_8hpp" startline="281" endline="295">nc::Random&lt; dtype &gt;::discrete</referencedby>
        <referencedby refid="classnc_1_1_random_1aa035bb7e8e2987dc4a447b839ccc4cd8" compoundref="_random_8hpp" startline="309" endline="320">nc::Random&lt; dtype &gt;::exponential</referencedby>
        <referencedby refid="classnc_1_1_random_1a53a28374728aaa7087e231f0fae53b08" compoundref="_random_8hpp" startline="333" endline="358">nc::Random&lt; dtype &gt;::extremeValue</referencedby>
        <referencedby refid="classnc_1_1_random_1a6c5add0fbad5e12b09bcc906bc3e3042" compoundref="_random_8hpp" startline="373" endline="398">nc::Random&lt; dtype &gt;::f</referencedby>
        <referencedby refid="classnc_1_1_random_1a93a1804dff12c99cbfea67d63b6c1705" compoundref="_random_8hpp" startline="413" endline="438">nc::Random&lt; dtype &gt;::gamma</referencedby>
        <referencedby refid="classnc_1_1_random_1a1887cf86a1baebbd04a5478d6ba6d0e8" compoundref="_random_8hpp" startline="452" endline="473">nc::Random&lt; dtype &gt;::geometric</referencedby>
        <referencedby refid="classnc_1_1_random_1a80c55a3bbcc68dc4a7721ca9a3e078ba" compoundref="_random_8hpp" startline="488" endline="499">nc::Random&lt; dtype &gt;::laplace</referencedby>
        <referencedby refid="classnc_1_1_random_1aee9698e1d4dc96db76926c2ffdccb6d0" compoundref="_random_8hpp" startline="514" endline="532">nc::Random&lt; dtype &gt;::lognormal</referencedby>
        <referencedby refid="classnc_1_1_random_1a72fc0e0e53cca6b78872c733b6a0ae3c" compoundref="_random_8hpp" startline="547" endline="575">nc::Random&lt; dtype &gt;::negativeBinomial</referencedby>
        <referencedby refid="classnc_1_1_random_1ac9a8e8794eb51110c451327d7f7cc113" compoundref="_random_8hpp" startline="590" endline="615">nc::Random&lt; dtype &gt;::nonCentralChiSquared</referencedby>
        <referencedby refid="classnc_1_1_random_1a476e3a7c5c3c861bfdd8a18ddee7513c" compoundref="_random_8hpp" startline="630" endline="648">nc::Random&lt; dtype &gt;::normal</referencedby>
        <referencedby refid="classnc_1_1_random_1aac7f15f7239f83f1b345ff5dfcca92f7" compoundref="_random_8hpp" startline="661" endline="666">nc::Random&lt; dtype &gt;::permutation</referencedby>
        <referencedby refid="classnc_1_1_random_1a2c9f9e6aa5ca88a6e1f674cf9f4391e3" compoundref="_random_8hpp" startline="698" endline="716">nc::Random&lt; dtype &gt;::poisson</referencedby>
        <referencedby refid="classnc_1_1_random_1ac73c913bc278f74fd7d5085d03f837e0" compoundref="_random_8hpp" startline="730" endline="741">nc::Random&lt; dtype &gt;::rand</referencedby>
        <referencedby refid="classnc_1_1_random_1a05b9dec10bb644cf7eddb739080f0a4f" compoundref="_random_8hpp" startline="756" endline="778">nc::Random&lt; dtype &gt;::randFloat</referencedby>
        <referencedby refid="classnc_1_1_random_1a58118049d8d151830785eea302af5586" compoundref="_random_8hpp" startline="793" endline="818">nc::Random&lt; dtype &gt;::randInt</referencedby>
        <referencedby refid="classnc_1_1_random_1aa1c4292668a94c9e5a9b554f9c0ca76d" compoundref="_random_8hpp" startline="832" endline="843">nc::Random&lt; dtype &gt;::randN</referencedby>
        <referencedby refid="classnc_1_1_random_1ab6d07e63c6c81d701128f8200c5e70bb" compoundref="_random_8hpp" startline="854" endline="857">nc::Random&lt; dtype &gt;::seed</referencedby>
        <referencedby refid="classnc_1_1_random_1a3f774eb455f2e06bc9d931b0c6f7e02e" compoundref="_random_8hpp" startline="866" endline="869">nc::Random&lt; dtype &gt;::shuffle</referencedby>
        <referencedby refid="classnc_1_1_random_1a57a05a8245191055af23eb5cf2b636cd" compoundref="_random_8hpp" startline="901" endline="919">nc::Random&lt; dtype &gt;::studentT</referencedby>
        <referencedby refid="classnc_1_1_random_1a3419c1f88a3c562441af695afd387daf" compoundref="_random_8hpp" startline="935" endline="976">nc::Random&lt; dtype &gt;::triangle</referencedby>
        <referencedby refid="classnc_1_1_random_1a87d6d188ab390ea5fed2da488bdb0cfa" compoundref="_random_8hpp" startline="1008" endline="1030">nc::Random&lt; dtype &gt;::uniformOnSphere</referencedby>
        <referencedby refid="classnc_1_1_random_1aed7b5774e94cfa1cca50f383ff3a3612" compoundref="_random_8hpp" startline="1045" endline="1070">nc::Random&lt; dtype &gt;::weibull</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1a4a45571b060fcb2c3e323fb8f8d7b00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::abs</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the absolute value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.absolute.html">https://www.numpy.org/devdocs/reference/generated/numpy.absolute.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="60" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="967" bodyend="970"/>
        <references refid="namespacenc_1a5251a8cc0a2a09fd87c66149e1172244" compoundref="_methods_8hpp" startline="984" endline="991">abs</references>
        <referencedby refid="classnc_1_1coordinates_1_1_dec_1a63de0ff17c7f842866893fdfacd0edb7" compoundref="_coordinates_8hpp" startline="239" endline="257">nc::coordinates::Dec::Dec</referencedby>
        <referencedby refid="namespacenc_1ac2a107bb7ecfcf649c408069166ed1ea" compoundref="_methods_8hpp" startline="1056" endline="1066">allclose</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1ae6c1faadee65ae35236c3551784cd5f1" compoundref="_nd_array_8hpp" startline="709" endline="722">nc::NdArray&lt; bool &gt;::at</referencedby>
        <referencedby refid="namespacenc_1_1utils_1ab8f33a7e18654f6870deaa8f9c038195" compoundref="_utils_8hpp" startline="52" endline="59">nc::utils::essentiallyEqual</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5251a8cc0a2a09fd87c66149e1172244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::abs</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the absolute value element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.absolute.html">https://www.numpy.org/devdocs/reference/generated/numpy.absolute.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="63" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="984" bodyend="991"/>
        <referencedby refid="namespacenc_1a4a45571b060fcb2c3e323fb8f8d7b00e" compoundref="_methods_8hpp" startline="967" endline="970">abs</referencedby>
        <referencedby refid="namespacenc_1ab889b055de45596f5c541cdfc213b5c9" compoundref="_methods_8hpp" startline="2403" endline="2418">copySign</referencedby>
        <referencedby refid="namespacenc_1a81969bd9383c15d95e6b2150dac1eda5" compoundref="_methods_8hpp" startline="4675" endline="4690">isclose</referencedby>
        <referencedby refid="namespacenc_1acac1ebbc5e3f3ef8d09874f3fcf1b22b" compoundref="_methods_8hpp" startline="7304" endline="7364">roll</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab4a75fada8db6e1f30e187712fa69f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::add</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add arguments element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.add.html">https://www.numpy.org/devdocs/reference/generated/numpy.add.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="66" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1005" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3c13463ad0ab59dcbd9d8efc99b83ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::alen</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>alen</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the length of the first dimension of the input array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length uint16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="69" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1020" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4235edadb0375282eabfa83ee9d2ac33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::all</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>all</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether all array elements along a given axis evaluate to True.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.all.html">https://www.numpy.org/devdocs/reference/generated/numpy.all.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="72" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1037" bodyend="1040"/>
        <references refid="classnc_1_1_nd_array_1a92737efa2e525a62ad07e63534bd8e36" compoundref="_nd_array_8hpp" startline="1070" endline="1108">nc::NdArray&lt; dtype &gt;::all</references>
        <referencedby refid="namespacenc_1ac2a107bb7ecfcf649c408069166ed1ea" compoundref="_methods_8hpp" startline="1056" endline="1066">allclose</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac2a107bb7ecfcf649c408069166ed1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::allclose</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2, double inTolerance=1e-5)</argsstring>
        <name>allclose</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inTolerance</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if two arrays are element-wise equal within a tolerance. inTolerance must be a positive number</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.allclose.html">https://www.numpy.org/devdocs/reference/generated/numpy.allclose.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default 1e-5) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="75" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1056" bodyend="1066"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="namespacenc_1a4235edadb0375282eabfa83ee9d2ac33" compoundref="_methods_8hpp" startline="1037" endline="1040">all</references>
        <references refid="namespacenc_1a4a45571b060fcb2c3e323fb8f8d7b00e" compoundref="_methods_8hpp" startline="967" endline="970">abs</references>
        <references refid="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" compoundref="_nd_array_8hpp" startline="1892" endline="1904">nc::NdArray&lt; dtype &gt;::item</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a23567c062b1a0c21a53b8b96afd02763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::amax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>amax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum of an array or maximum along an axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.amax.html">https://www.numpy.org/devdocs/reference/generated/numpy.amax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="78" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1080" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a56fe75564b762f364503eccc3cb89c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::amin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>amin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the minimum of an array or minimum along an axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.amin.html">https://www.numpy.org/devdocs/reference/generated/numpy.amin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>min value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="81" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1097" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afe94c34ed37789efef150d21bcf1936e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::any</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether any array element along a given axis evaluates to True.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.any.html">https://www.numpy.org/devdocs/reference/generated/numpy.any.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="84" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1114" bodyend="1117"/>
        <references refid="classnc_1_1_nd_array_1abe14645f18b0cf6b62e622f0db0624e0" compoundref="_nd_array_8hpp" startline="1121" endline="1159">nc::NdArray&lt; dtype &gt;::any</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aadf90a1e77b251c318146a945c75e908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::append</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; dtype &gt; &amp;inAppendValues, Axis inAxis=Axis::NONE)</argsstring>
        <name>append</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inAppendValues</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append values to the end of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.append.html">https://www.numpy.org/devdocs/reference/generated/numpy.append.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAppendValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE): The axis along which values are appended. If axis is not given, both inArray and inAppendValues are flattened before use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="93" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1165" bodyend="1221"/>
        <references refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="namespacenc_1a8fc2a8a065e4a00776255876d40c7d61" compoundref="_methods_8hpp" startline="2386" endline="2389">copy</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7">ROW</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84aa44a065875f5d66d41474bb9bfb0ce05">COL</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abf69ea1ebe26e8dc59a6370f1836f3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::applyFunction</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const std::function&lt; dtype(dtype)&gt; &amp;inFunc) noexcept</argsstring>
        <name>applyFunction</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const std::function&lt; dtype(dtype)&gt; &amp;</type>
          <declname>inFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1b8d36bd5087070a720f8d4685c0721c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::applyFunction</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const std::function&lt; dtype(dtype)&gt; &amp;inFunc) noexcept</argsstring>
        <name>applyFunction</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const std::function&lt; dtype(dtype)&gt; &amp;</type>
          <declname>inFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the input function element wise to the input array in place.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFunc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="1130" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1130" bodyend="1133"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9a031ffe7bb9bd50161d241aa8bb35b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::applyPoly1d</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const Poly1d&lt; dtype &gt; &amp;inPoly) noexcept</argsstring>
        <name>applyPoly1d</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply polynomial elemnt wise to the input values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="90" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1145" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8e78c416b2386411d8c6b5226bd4c78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::arange</definition>
        <argsstring>(dtype inStart, dtype inStop, dtype inStep=1)</argsstring>
        <name>arange</name>
        <param>
          <type>dtype</type>
          <declname>inStart</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inStop</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inStep</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return evenly spaced values within a given interval.</para><para>Values are generated within the half - open interval[start, stop) (in other words, the interval including start but excluding stop). For integer arguments the function is equivalent to the Python built - in range function, but returns an ndarray rather than a list.</para><para>When using a non - integer step, such as 0.1, the results will often not be consistent.It is better to use linspace for these cases.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arange.html">https://www.numpy.org/devdocs/reference/generated/numpy.arange.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStart</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStop</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStep</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, defaults to 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="96" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1244" bodyend="1282"/>
        <referencedby refid="classnc_1_1_random_1aac7f15f7239f83f1b345ff5dfcca92f7" compoundref="_random_8hpp" startline="661" endline="666">nc::Random&lt; dtype &gt;::permutation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac94fc8f9322f93966478e9ffe7db51f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::arange</definition>
        <argsstring>(dtype inStop)</argsstring>
        <name>arange</name>
        <param>
          <type>dtype</type>
          <declname>inStop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return evenly spaced values within a given interval.</para><para>Values are generated within the half - open interval[start, stop) (in other words, the interval including start but excluding stop). For integer arguments the function is equivalent to the Python built - in range function, but returns an ndarray rather than a list.</para><para>When using a non - integer step, such as 0.1, the results will often not be consistent.It is better to use linspace for these cases.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arange.html">https://www.numpy.org/devdocs/reference/generated/numpy.arange.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStop</parametername>
</parameternamelist>
<parameterdescription>
<para>start is 0 and step is 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="99" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1304" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2e9892f02e430f84f563d3608f041b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::arange</definition>
        <argsstring>(const Slice &amp;inSlice)</argsstring>
        <name>arange</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return evenly spaced values within a given interval.</para><para>Values are generated within the half - open interval[start, stop) (in other words, the interval including start but excluding stop). For integer arguments the function is equivalent to the Python built - in range function, but returns an ndarray rather than a list.</para><para>When using a non - integer step, such as 0.1, the results will often not be consistent.It is better to use linspace for these cases.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arange.html">https://www.numpy.org/devdocs/reference/generated/numpy.arange.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="102" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1336" bodyend="1339"/>
        <references refid="classnc_1_1_slice_1a36ddb261d9057db4a9794b4fc46e9d3f" compoundref="_slice_8hpp" startline="47">nc::Slice::start</references>
        <references refid="classnc_1_1_slice_1ac2d72f4ca003ed645bc82efcafee87f5" compoundref="_slice_8hpp" startline="48">nc::Slice::stop</references>
        <references refid="classnc_1_1_slice_1a112855a11aa1737b7859e3d63feb09c4" compoundref="_slice_8hpp" startline="49">nc::Slice::step</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa24aa108f3bd91f2b66077217f9778ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arccos</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arccos</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse cosine</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arccos.html">https://www.numpy.org/devdocs/reference/generated/numpy.arccos.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="105" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1353" bodyend="1356"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6055d93be89b8be57f9080ea8793969c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arccos</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arccos</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse cosine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arccos.html">https://www.numpy.org/devdocs/reference/generated/numpy.arccos.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="108" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1370" bodyend="1378"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a42e138a8181fed9ef9257708f046daff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arccosh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arccosh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic cosine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arccosh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arccosh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="111" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1392" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad2d10895441f7df1a3203565f3984663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arccosh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arccosh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic cosine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arccosh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arccosh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="114" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1409" bodyend="1417"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a64381893b9faec832dd53c3a6dc2c15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arcsin</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arcsin</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse sine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arcsin.html">https://www.numpy.org/devdocs/reference/generated/numpy.arcsin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="117" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1431" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2f54d8861d41bbd61243658329c41ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arcsin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arcsin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse sine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arcsin.html">https://www.numpy.org/devdocs/reference/generated/numpy.arcsin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="120" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1448" bodyend="1456"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad23df3dddc17bd0ed604b706d9a9e46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arcsinh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arcsinh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic sine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arcsinh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arcsinh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="123" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1470" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a32d7af3056b976659172d4f5715ea469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arcsinh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arcsinh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic sine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arcsinh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arcsinh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="126" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1487" bodyend="1495"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af2982328417da6b69c6cd02b728f4dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arctan</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arctan</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse tangent.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctan.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="129" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1509" bodyend="1512"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4ee14f261c78c75b9f4caea40dc6a243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arctan</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arctan</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse tangent, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctan.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="132" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1526" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1a93c38369f33b46266595c3eb6e6f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arctan2</definition>
        <argsstring>(dtype inY, dtype inX) noexcept</argsstring>
        <name>arctan2</name>
        <param>
          <type>dtype</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse tangent.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctan2.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctan2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inY</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="135" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1548" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2b5d8736929806863f38d9fa23a632c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arctan2</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inY, const NdArray&lt; dtype &gt; &amp;inX)</argsstring>
        <name>arctan2</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse tangent, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctan2.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctan2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inY</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="138" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1565" bodyend="1580"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a33e6911f3786e91e8a5bcbb82308492c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::arctanh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>arctanh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic tangent.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctanh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctanh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="141" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1594" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a01094d10626c0ad1943b81b04b7f5048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::arctanh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>arctanh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric inverse hyperbolic tangent, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.arctanh.html">https://www.numpy.org/devdocs/reference/generated/numpy.arctanh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="144" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1611" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af52bc3de3aa137cd5c5ce233ad42f3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::argmax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>argmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices of the maximum values along an axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.argmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.argmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="147" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1633" bodyend="1636"/>
        <referencedby refid="namespacenc_1a75582227790ce0c16c908a6a7b9ac53f" compoundref="_methods_8hpp" startline="5560" endline="5568">nanargmax</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a2006b918951028c977fd975e63c486ab" compoundref="_rotations_8hpp" startline="284" endline="350">nc::rotations::Quaternion::fromDCM</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3b6d30ed28a5139b97adf122cedc536d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::argmin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>argmin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices of the minimum values along an axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.argmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.argmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="150" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1650" bodyend="1653"/>
        <referencedby refid="namespacenc_1a611f45f3b09290d0d6e6c91a2c01ee19" compoundref="_methods_8hpp" startline="5582" endline="5590">nanargmin</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af1f9dbd430ee0b6dcb7330d092a79d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::argsort</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>argsort</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices that would sort an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.argsort.html">https://www.numpy.org/devdocs/reference/generated/numpy.argsort.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="153" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1667" bodyend="1670"/>
        <referencedby refid="namespacenc_1acb0128da9c31422e62814a91d2075d9d" compoundref="_methods_8hpp" startline="4559" endline="4609">interp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa7ccc098309c6eaebda27e6df4aeb006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::argwhere</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>argwhere</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the indices of array elements that are non-zero, grouped by element.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.argwhere.html">https://www.numpy.org/devdocs/reference/generated/numpy.argwhere.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="156" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1683" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8250ef32530487269598328eea9540a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::around</definition>
        <argsstring>(dtype inValue, uint8 inNumDecimals=0) noexcept</argsstring>
        <name>around</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evenly round to the given number of decimals.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.around.html">https://www.numpy.org/devdocs/reference/generated/numpy.around.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default = 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="159" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1700" bodyend="1704"/>
        <references refid="classnc_1_1_nd_array_1a3f1c7b94cf5f2b2beb961ef426e0e29f" compoundref="_nd_array_8hpp" startline="3142" endline="3159">nc::NdArray&lt; dtype &gt;::round</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6fd3795d731bd41c022adc5d1cdbb24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::around</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inNumDecimals=0) noexcept</argsstring>
        <name>around</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evenly round to the given number of decimals.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.around.html">https://www.numpy.org/devdocs/reference/generated/numpy.around.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default = 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="162" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1718" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0e8c1396cc01ccd9ec8ba549b6347e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::array_equal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2) noexcept</argsstring>
        <name>array_equal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if two arrays have the same shape and elements, False otherwise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.array_equal.html">https://www.numpy.org/devdocs/reference/generated/numpy.array_equal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="165" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1736" bodyend="1744"/>
        <references refid="namespacenc_1a6891660e45d9f047bfc3a4625f4a255d" compoundref="_methods_8hpp" startline="3336" endline="3339">equal</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac7cfdea4ac1caa81eabdb5dfe33b90b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::array_equiv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2) noexcept</argsstring>
        <name>array_equiv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if input arrays are shape consistent and all elements equal.</para><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> consistent means they are either the same shape, or one input array can be broadcasted to create the same shape as the other one.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.array_equiv.html">https://www.numpy.org/devdocs/reference/generated/numpy.array_equiv.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="168" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1762" bodyend="1770"/>
        <references refid="namespacenc_1a6891660e45d9f047bfc3a4625f4a255d" compoundref="_methods_8hpp" startline="3336" endline="3339">equal</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acaee4c8e7c5b526ab817cc6be681c7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::asarray</definition>
        <argsstring>(const std::vector&lt; dtype &gt; &amp;inVector) noexcept</argsstring>
        <name>asarray</name>
        <param>
          <type>const std::vector&lt; dtype &gt; &amp;</type>
          <declname>inVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the vector to an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.asarray.html">https://www.numpy.org/devdocs/reference/generated/numpy.asarray.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVector</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="171" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1784" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab83c5ccbe0d638e46fadfaf8cf86aa57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::asarray</definition>
        <argsstring>(std::initializer_list&lt; dtype &gt; &amp;inList) noexcept</argsstring>
        <name>asarray</name>
        <param>
          <type>std::initializer_list&lt; dtype &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the list initializer to an array. eg: NdArray&lt;int&gt; myArray = NC::asarray&lt;int&gt;({1,2,3});</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.asarray.html">https://www.numpy.org/devdocs/reference/generated/numpy.asarray.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="174" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1802" bodyend="1805"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa15c560428b30b2f79cc608810b29168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt; dtypeOut &gt; nc::astype</definition>
        <argsstring>(const NdArray&lt; dtype &gt; inArray) noexcept</argsstring>
        <name>astype</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="177" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1817" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a86d9f6b52c30c60a61dd46a3a64ac3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::average</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>average</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the average along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.average.html">https://www.numpy.org/devdocs/reference/generated/numpy.average.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="180" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1834" bodyend="1837"/>
        <references refid="classnc_1_1_nd_array_1a6e6476097ba788402df110a2a3e8e12a" compoundref="_nd_array_8hpp" startline="2017" endline="2058">nc::NdArray&lt; dtype &gt;::mean</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a171381462e430870904ae2a24ce2541a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::average</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; dtype &gt; &amp;inWeights, Axis inAxis=Axis::NONE)</argsstring>
        <name>average</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inWeights</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the weighted average along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.average.html">https://www.numpy.org/devdocs/reference/generated/numpy.average.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inWeights</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="183" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1852" bodyend="1931"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3b3788718518fe32e78e0400ce816b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nc::binaryRepr</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>binaryRepr</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the binary representation of the input number as a string.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.binary_repr.html">https://www.numpy.org/devdocs/reference/generated/numpy.binary_repr.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="186" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1944" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0277d104fe80e8190cc4e1326772e768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bincount</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint16 inMinLength=0)</argsstring>
        <name>bincount</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a58dcfca0b29c16ffb4ca118b2a1cb399" kindref="member">uint16</ref></type>
          <declname>inMinLength</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count number of occurrences of each value in array of non-negative ints. Negative values will be counted in the zero bin.</para><para>The number of bins(of size 1) is one larger than the largest value in x. If minlength is specified, there will be at least this number of bins in the output array(though it will be longer if necessary, depending on the contents of x).Each bin gives the number of occurrences of its index value in x.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.bincount.html">https://www.numpy.org/devdocs/reference/generated/numpy.bincount.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMinLength</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="189" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="1968" bodyend="1997"/>
        <references refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" compoundref="_nd_array_8hpp" startline="1917" endline="1954">nc::NdArray&lt; dtype &gt;::max</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
        <references refid="classnc_1_1_nd_array_1abf06a319d8415dd4c61495aa67cfc0f1" compoundref="_nd_array_8hpp" startline="1408" endline="1413">nc::NdArray&lt; dtype &gt;::clip</references>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af5487b1de68d96d3d65c56642164a9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bincount</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; dtype &gt; &amp;inWeights, uint16 inMinLength=0)</argsstring>
        <name>bincount</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inWeights</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a58dcfca0b29c16ffb4ca118b2a1cb399" kindref="member">uint16</ref></type>
          <declname>inMinLength</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count number of occurrences of each value in array of non-negative ints. Negative values will be counted in the zero bin.</para><para>The number of bins(of size 1) is one larger than the largest value in x. If minlength is specified, there will be at least this number of bins in the output array(though it will be longer if necessary, depending on the contents of x).Each bin gives the number of occurrences of its index value in x.If weights is specified the input array is weighted by it, i.e. if a value n is found at position i, out[n] += weight[i] instead of out[n] += 1. Weights array shall be of the same shape as inArray.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.bincount.html">https://www.numpy.org/devdocs/reference/generated/numpy.bincount.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inWeights</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMinLength</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="192" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2021" bodyend="2058"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" compoundref="_nd_array_8hpp" startline="1917" endline="1954">nc::NdArray&lt; dtype &gt;::max</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
        <references refid="classnc_1_1_nd_array_1abf06a319d8415dd4c61495aa67cfc0f1" compoundref="_nd_array_8hpp" startline="1408" endline="1413">nc::NdArray&lt; dtype &gt;::clip</references>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5afa3584a513bcb32788d5132a38729d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bitwise_and</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the bit-wise AND of two arrays element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_and.html">https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_and.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="195" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2072" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af1ed7515abc351517fb7cec8c7dbf1b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bitwise_not</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>bitwise_not</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the bit-wise NOT the input array element-wise.</para><para>inArray <simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="198" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2086" bodyend="2089"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3008c967d169052c08854a03eeac728b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bitwise_or</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the bit-wise OR of two arrays element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_or.html">https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_or.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="201" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2103" bodyend="2106"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0fcfb7c2d5da6c8c84afafe62f47f5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::bitwise_xor</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the bit-wise XOR of two arrays element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_xor.html">https://www.numpy.org/devdocs/reference/generated/numpy.bitwise_xor.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="204" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2120" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac49e5a284be9238624ebd3f548fcb474" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::boost2Nc</definition>
        <argsstring>(const boost::python::numpy::ndarray &amp;inArray)</argsstring>
        <name>boost2Nc</name>
        <param>
          <type>const boost::python::numpy::ndarray &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from a boost ndarray to a NumCpp NdArray&lt;T&gt;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="62" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="62" bodyend="103"/>
        <references refid="classnc_1_1_boost_ndarray_helper_1a7733d98210d4bbd186e374a1e643f67a" compoundref="_boost_numpy_ndarray_helper_8hpp" startline="204" endline="207">nc::BoostNdarrayHelper::numDimensions</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_boost_ndarray_helper_1a71c1fa8b479202b64e5a970a500078a3" compoundref="_boost_numpy_ndarray_helper_8hpp" startline="214" endline="217">nc::BoostNdarrayHelper::shape</references>
        <references refid="classnc_1_1_shape_1ab29f87cc8479a2d0610a918cd9b08bbc" compoundref="_shape_8hpp" startline="104" endline="107">nc::Shape::size</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5265f3766d2d329c2361e8e878897890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::byteswap</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>byteswap</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the bytes of the array elements swapped.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="207" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2136" bodyend="2141"/>
        <references refid="classnc_1_1_nd_array_1acfd8c01c4c79bda25e1796a51aea2a30" compoundref="_nd_array_8hpp" startline="1371" endline="1395">nc::NdArray&lt; dtype &gt;::byteswap</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a21de0caa1ff8e9e7baed8a8a57f7bcab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::cbrt</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>cbrt</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cube-root of an array. Not super usefull if not using a floating point type</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cbrt.html">https://www.numpy.org/devdocs/reference/generated/numpy.cbrt.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="210" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2155" bodyend="2158"/>
        <references refid="namespacenc_1abfc0d0118edd5861f0a26a41e88667f1" compoundref="_methods_8hpp" startline="2171" endline="2179">cbrt</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abfc0d0118edd5861f0a26a41e88667f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::cbrt</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>cbrt</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cube-root of an array, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cbrt.html">https://www.numpy.org/devdocs/reference/generated/numpy.cbrt.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="213" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2171" bodyend="2179"/>
        <referencedby refid="namespacenc_1a21de0caa1ff8e9e7baed8a8a57f7bcab" compoundref="_methods_8hpp" startline="2155" endline="2158">cbrt</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a291189b2c2bc35a608b393ab1c06e84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::ceil</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>ceil</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the ceiling of the input.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ceil.html">https://www.numpy.org/devdocs/reference/generated/numpy.ceil.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="216" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2192" bodyend="2195"/>
        <references refid="namespacenc_1a7fe80c46fd6f4d80a1656ab592aa4888" compoundref="_methods_8hpp" startline="2208" endline="2216">ceil</references>
        <referencedby refid="namespacenc_1_1filter_1ad167f1f3b185f666c70d2e2dc9d21024" compoundref="_filter_8hpp" startline="962" endline="1004">nc::filter::gaussianFilter</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a03cc5a48e29d6f25636789b65366f243" compoundref="_filter_8hpp" startline="1020" endline="1057">nc::filter::gaussianFilter1d</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7fe80c46fd6f4d80a1656ab592aa4888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ceil</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the ceiling of the input, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ceil.html">https://www.numpy.org/devdocs/reference/generated/numpy.ceil.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="219" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2208" bodyend="2216"/>
        <referencedby refid="namespacenc_1a291189b2c2bc35a608b393ab1c06e84a" compoundref="_methods_8hpp" startline="2192" endline="2195">ceil</referencedby>
        <referencedby refid="namespacenc_1af259d081804c4be2d33e3a00e937b79c" compoundref="_methods_8hpp" startline="3608" endline="3611">fix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6f71d75583176a599a64647109170a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::clip</definition>
        <argsstring>(dtype inValue, dtype inMinValue, dtype inMaxValue) noexcept</argsstring>
        <name>clip</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMinValue</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMaxValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clip (limit) the value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.clip.html">https://www.numpy.org/devdocs/reference/generated/numpy.clip.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMinValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMaxValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="222" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2231" bodyend="2234"/>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a7a39f199e4d1ad773b93c69e66ae0415" compoundref="_rotations_8hpp" startline="456" endline="502">nc::rotations::Quaternion::slerp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac8470132c83da505af29cefa24dea489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::clip</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, dtype inMinValue, dtype inMaxValue) noexcept</argsstring>
        <name>clip</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMinValue</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inMaxValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clip (limit) the values in an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.clip.html">https://www.numpy.org/devdocs/reference/generated/numpy.clip.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMinValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMaxValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="225" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2249" bodyend="2252"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1fd4b60fc74fcb37dff8faa08e877241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::column_stack</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList)</argsstring>
        <name>column_stack</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stack 1-D arrays as columns into a 2-D array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.column_stack.html">https://www.numpy.org/devdocs/reference/generated/numpy.column_stack.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para>{list} of arrays to stack </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="228" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2266" bodyend="2305"/>
        <references refid="classnc_1_1_shape_1abcd1dafbc4c959f49d40b70d78a3ef2c" compoundref="_shape_8hpp" startline="115" endline="118">nc::Shape::isnull</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <referencedby refid="namespacenc_1a6848af2d5c509218538f48808241b1b1" compoundref="_methods_8hpp" startline="2319" endline="2356">concatenate</referencedby>
        <referencedby refid="namespacenc_1a2f1b55ae1381a85f64d781b979e77c43" compoundref="_methods_8hpp" startline="4438" endline="4441">hstack</referencedby>
        <referencedby refid="namespacenc_1ad802c086d7fbd7d07e0fd98b38ea351c" compoundref="_methods_8hpp" startline="7872" endline="7891">stack</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6848af2d5c509218538f48808241b1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::concatenate</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList, Axis inAxis=Axis::NONE)</argsstring>
        <name>concatenate</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Join a sequence of arrays along an existing axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.concatenate.html">https://www.numpy.org/devdocs/reference/generated/numpy.concatenate.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="231" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2319" bodyend="2356"/>
        <references refid="namespacenc_1a8fc2a8a065e4a00776255876d40c7d61" compoundref="_methods_8hpp" startline="2386" endline="2389">copy</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="namespacenc_1a4d53bca44b0a1ec255de0bc72d048bf2" compoundref="_methods_8hpp" startline="7449" endline="7488">row_stack</references>
        <references refid="namespacenc_1a1fd4b60fc74fcb37dff8faa08e877241" compoundref="_methods_8hpp" startline="2266" endline="2305">column_stack</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae7d04e8f21e110cfc0f81ac6bad65655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::contains</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, dtype inValue, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether or not a value is included the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="234" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2369" bodyend="2372"/>
        <references refid="classnc_1_1_nd_array_1a129666b27611423b46c05c7fdbe937d4" compoundref="_nd_array_8hpp" startline="1437" endline="1474">nc::NdArray&lt; dtype &gt;::contains</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8fc2a8a065e4a00776255876d40c7d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::copy</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an array copy of the given object.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.copy.html">https://www.numpy.org/devdocs/reference/generated/numpy.copy.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="237" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2386" bodyend="2389"/>
        <referencedby refid="namespacenc_1aadf90a1e77b251c318146a945c75e908" compoundref="_methods_8hpp" startline="1165" endline="1221">append</referencedby>
        <referencedby refid="namespacenc_1a6848af2d5c509218538f48808241b1b1" compoundref="_methods_8hpp" startline="2319" endline="2356">concatenate</referencedby>
        <referencedby refid="namespacenc_1a13182724941436fd30dd1516dcb003aa" compoundref="_methods_8hpp" startline="8513" endline="8614">trim_zeros</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1ae67291e792c9460c7f78fc9e6308deee" compoundref="_nd_array_8hpp" startline="169" endline="176">nc::NdArray&lt; bool &gt;::NdArray</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1adb463d5b2ede1f5ec6bbc3c2dd14a9b4" compoundref="_nd_array_8hpp" startline="367" endline="375">nc::NdArray&lt; bool &gt;::operator=</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a5169b9ad613ce03c7cb748b05e978028" compoundref="_nd_array_8hpp" startline="1834" endline="1839">nc::NdArray&lt; bool &gt;::flatten</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a5b886044df5232dc1ba6a8e01c92c9dd" compoundref="_nd_array_8hpp" startline="3028" endline="3052">nc::NdArray&lt; bool &gt;::resizeSlow</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a4bf97703eb224b0f5794bf02a940ca8d" compoundref="_nd_array_8hpp" startline="4637" endline="4643">nc::NdArray&lt; bool &gt;::operator++</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a0d3748ca1860d35fe70597b0fb2a9dbb" compoundref="_nd_array_8hpp" startline="4652" endline="4658">nc::NdArray&lt; bool &gt;::operator--</referencedby>
        <referencedby refid="classnc_1_1_poly1d_1aa37af655ace63c299538d57021294d61" compoundref="_polynomial_8hpp" startline="288" endline="308">nc::Poly1d&lt; dtype &gt;::operator*=</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab889b055de45596f5c541cdfc213b5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::copySign</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>copySign</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the sign of x1 to that of x2, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.copysign.html">https://www.numpy.org/devdocs/reference/generated/numpy.copysign.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="240" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2403" bodyend="2418"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1a5251a8cc0a2a09fd87c66149e1172244" compoundref="_methods_8hpp" startline="984" endline="991">abs</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8711dc5280db1e77e05eba0bff147936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::copyto</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inDestArray, const NdArray&lt; dtype &gt; &amp;inSrcArray) noexcept</argsstring>
        <name>copyto</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inDestArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inSrcArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies values from one array to another</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.copyto.html">https://www.numpy.org/devdocs/reference/generated/numpy.copyto.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inDestArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSrcArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="243" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2432" bodyend="2436"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1affd0f5b31b2bd1b9cea9ab54e25dfab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::cos</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>cos</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cosine</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cos.html">https://www.numpy.org/devdocs/reference/generated/numpy.cos.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="246" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2450" bodyend="2453"/>
        <references refid="namespacenc_1a2f13c698853574855bd7f60076d706a8" compoundref="_methods_8hpp" startline="2467" endline="2475">cos</references>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1aafb38c20ae954808d18179e227223bd9" compoundref="_rotations_8hpp" startline="129" endline="148">nc::rotations::Quaternion::angleAxisRotation</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a7a39f199e4d1ad773b93c69e66ae0415" compoundref="_rotations_8hpp" startline="456" endline="502">nc::rotations::Quaternion::slerp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2f13c698853574855bd7f60076d706a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::cos</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cosine element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cos.html">https://www.numpy.org/devdocs/reference/generated/numpy.cos.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="249" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2467" bodyend="2475"/>
        <referencedby refid="namespacenc_1affd0f5b31b2bd1b9cea9ab54e25dfab2" compoundref="_methods_8hpp" startline="2450" endline="2453">cos</referencedby>
        <referencedby refid="namespacenc_1aac5e942220c693fb9e65fcc3ff4fc50f" compoundref="_methods_8hpp" startline="8722" endline="8725">unwrap</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a201b05754dd9d5824747251770b285e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::cosh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>cosh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hyperbolic Cosine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cosh.html">https://www.numpy.org/devdocs/reference/generated/numpy.cosh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="252" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2489" bodyend="2492"/>
        <references refid="namespacenc_1a4076791fb98e5d6fcb6ce58ab6ec85de" compoundref="_methods_8hpp" startline="2506" endline="2514">cosh</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4076791fb98e5d6fcb6ce58ab6ec85de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::cosh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hyperbolic Cosine element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cosh.html">https://www.numpy.org/devdocs/reference/generated/numpy.cosh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="255" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2506" bodyend="2514"/>
        <referencedby refid="namespacenc_1a201b05754dd9d5824747251770b285e6" compoundref="_methods_8hpp" startline="2489" endline="2492">cosh</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a065b2d856561ca3d57a47f9981eaa126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::count_nonzero</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>count_nonzero</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts the number of non-zero values in the array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.count_nonzero.html">https://www.numpy.org/devdocs/reference/generated/numpy.count_nonzero.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="258" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2528" bodyend="2570"/>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab414231c92c4fc20d778edc2c9b5dc12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::cross</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2, Axis inAxis=Axis::NONE)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cross product of two (arrays of) vectors.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cross.html">https://www.numpy.org/devdocs/reference/generated/numpy.cross.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="261" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2585" bodyend="2706"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1a5169b9ad613ce03c7cb748b05e978028" compoundref="_nd_array_8hpp" startline="1834" endline="1839">nc::NdArray&lt; dtype &gt;::flatten</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1afe758ef8867d56964efc5a67bf17e726" compoundref="_nd_array_8hpp" startline="2577" endline="2582">nc::NdArray&lt; dtype &gt;::put</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aff45cec624f58a7303ba39402ce10e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::cube</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>cube</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cubes the input</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cubed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="264" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2718" bodyend="2721"/>
        <references refid="namespacenc_1ad9a828f275a09dac2382a1e94584f5ae" compoundref="_methods_8hpp" startline="2733" endline="2741">cube</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad9a828f275a09dac2382a1e94584f5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::cube</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cubes the elements of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="267" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2733" bodyend="2741"/>
        <referencedby refid="namespacenc_1aff45cec624f58a7303ba39402ce10e79" compoundref="_methods_8hpp" startline="2718" endline="2721">cube</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a62e0bd76c4df1bb03d9e55566713b191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::cumprod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>cumprod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative product of elements along a given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cumprod.html">https://www.numpy.org/devdocs/reference/generated/numpy.cumprod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="270" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2755" bodyend="2758"/>
        <referencedby refid="namespacenc_1ae63aa8899b29a16b3a5916a046034d27" compoundref="_methods_8hpp" startline="5604" endline="5612">nancumprod</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afb98157ff8c733d7c24252a51e75104a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::cumsum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>cumsum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative sum of the elements along a given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.cumsum.html">https://www.numpy.org/devdocs/reference/generated/numpy.cumsum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="273" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2772" bodyend="2775"/>
        <referencedby refid="namespacenc_1a818b47bb2f6a404be808defd8d3d322a" compoundref="_methods_8hpp" startline="5626" endline="5634">nancumsum</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6adef279f0857eb53d76c6f8f9cd791d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::deg2rad</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>deg2rad</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.deg2rad.html">https://www.numpy.org/devdocs/reference/generated/numpy.deg2rad.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="276" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2789" bodyend="2792"/>
        <references refid="namespacenc_1_1constants_1a2f1219a120c9cc1434486d9de75a8221" compoundref="_constants_8hpp" startline="46">nc::constants::pi</references>
        <referencedby refid="classnc_1_1coordinates_1_1_r_a_1a7566e8350b9075ae0f0406fce26b7900" compoundref="_coordinates_8hpp" startline="95" endline="102">nc::coordinates::RA::RA</referencedby>
        <referencedby refid="classnc_1_1coordinates_1_1_dec_1af462329adb3a1bdb1f6b724e7a92a442" compoundref="_coordinates_8hpp" startline="267" endline="277">nc::coordinates::Dec::Dec</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abc6d4ba6f504c4eaee656f8c071c5103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::deg2rad</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray=Axis::NONE) noexcept</argsstring>
        <name>deg2rad</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.deg2rad.html">https://www.numpy.org/devdocs/reference/generated/numpy.deg2rad.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="279" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2806" bodyend="2814"/>
        <referencedby refid="namespacenc_1a362034446d04a8dc9468b5a90f6998c0" compoundref="_methods_8hpp" startline="6956" endline="6959">radians</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad643a144992a26ebab228cbcc0833039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::degrees</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>degrees</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.degrees.html">https://www.numpy.org/devdocs/reference/generated/numpy.degrees.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="282" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2828" bodyend="2831"/>
        <references refid="namespacenc_1a3dd7ad21130c11676cf2d292c0f0e11d" compoundref="_methods_8hpp" startline="6934" endline="6942">rad2deg</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1adbaac86caf37e0ce1e3017f41e56e92d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::degrees</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray=Axis::NONE) noexcept</argsstring>
        <name>degrees</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.degrees.html">https://www.numpy.org/devdocs/reference/generated/numpy.degrees.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="285" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2845" bodyend="2848"/>
        <references refid="namespacenc_1a3dd7ad21130c11676cf2d292c0f0e11d" compoundref="_methods_8hpp" startline="6934" endline="6942">rad2deg</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a90d99a9f0f7927372ae5fdc8fd3c0469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::deleteIndices</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; uint32 &gt; &amp;inArrayIdxs, Axis inAxis=Axis::NONE)</argsstring>
        <name>deleteIndices</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArrayIdxs</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with sub-arrays along an axis deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayIdxs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) if none the indices will be applied to the flattened array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="288" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2861" bodyend="2951"/>
        <references refid="namespacenc_1a4ff98c91846a1eda6681ea2ef476d06e" compoundref="_methods_8hpp" startline="8702" endline="8706">unique</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1a129666b27611423b46c05c7fdbe937d4" compoundref="_nd_array_8hpp" startline="1437" endline="1474">nc::NdArray&lt; dtype &gt;::contains</references>
        <references refid="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" compoundref="_nd_array_8hpp" startline="1892" endline="1904">nc::NdArray&lt; dtype &gt;::item</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" compoundref="_nd_array_8hpp" startline="1917" endline="1954">nc::NdArray&lt; dtype &gt;::max</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a07c6374c100b62dc48454c4c9d5be6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::deleteIndices</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const Slice &amp;inIndicesSlice, Axis inAxis=Axis::NONE)</argsstring>
        <name>deleteIndices</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inIndicesSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with sub-arrays along an axis deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inIndicesSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) if none the indices will be applied to the flattened array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="291" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="2964" bodyend="2994"/>
        <references refid="classnc_1_1_slice_1a4d518d51dad679d9a9c6938b065e38f8" compoundref="_slice_8hpp" startline="127" endline="177">nc::Slice::makePositiveAndValidate</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_slice_1a36ddb261d9057db4a9794b4fc46e9d3f" compoundref="_slice_8hpp" startline="47">nc::Slice::start</references>
        <references refid="classnc_1_1_slice_1ac2d72f4ca003ed645bc82efcafee87f5" compoundref="_slice_8hpp" startline="48">nc::Slice::stop</references>
        <references refid="classnc_1_1_slice_1a112855a11aa1737b7859e3d63feb09c4" compoundref="_slice_8hpp" startline="49">nc::Slice::step</references>
        <references refid="namespacenc_1a0ca5587c27a46c2d97fef54bc64bdc0b" compoundref="_methods_8hpp" startline="3007" endline="3011">deleteIndices</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0ca5587c27a46c2d97fef54bc64bdc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::deleteIndices</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inIndex, Axis inAxis=Axis::NONE)</argsstring>
        <name>deleteIndices</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with sub-arrays along an axis deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) if none the indices will be applied to the flattened array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="294" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3007" bodyend="3011"/>
        <referencedby refid="namespacenc_1a07c6374c100b62dc48454c4c9d5be6f4" compoundref="_methods_8hpp" startline="2964" endline="2994">deleteIndices</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a17ace954ac48456f1e57b95b8ae62fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::diagflat</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>diagflat</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a two-dimensional array with the flattened input as a diagonal.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.diagflat.html">https://www.numpy.org/devdocs/reference/generated/numpy.diagflat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="297" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3025" bodyend="3035"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
        <referencedby refid="namespacenc_1_1linalg_1aa2a95731baaa5ff4d5837c601987af22" compoundref="_linalg_8hpp" startline="1041" endline="1049">nc::linalg::svd</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0655ce58884ccfd25a778af5bbba3e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::diagonal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int32 inOffset=0, Axis inAxis=Axis::ROW) noexcept</argsstring>
        <name>diagonal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return specified diagonals.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.diagonal.html">https://www.numpy.org/devdocs/reference/generated/numpy.diagonal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(Defaults to 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) axis the offset is applied to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="300" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3050" bodyend="3053"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afc4f106e2d4a9a2f211c6725cdd74929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::diff</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the n-th discrete difference along given axis. Unsigned dtypes will give you weird results...obviously.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.diff.html">https://www.numpy.org/devdocs/reference/generated/numpy.diff.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="303" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3068" bodyend="3131"/>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1adb43a5803f6bc180c446971175074ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::divide</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a true division of the inputs, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.divide.html">https://www.numpy.org/devdocs/reference/generated/numpy.divide.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="306" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3145" bodyend="3148"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a50b693e816ecaa711b09997abaacec9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::dot</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dot product of two arrays.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.dot.html">https://www.numpy.org/devdocs/reference/generated/numpy.dot.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="309" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3162" bodyend="3165"/>
        <references refid="classnc_1_1_nd_array_1a13e5756a193d375c0b52e5929a41ca2f" compoundref="_nd_array_8hpp" startline="1719" endline="1751">nc::NdArray&lt; dtype &gt;::dot</references>
        <referencedby refid="classnc_1_1coordinates_1_1_coordinate_1a169974783c87c9bbc89ccb4ea2ea4123" compoundref="_coordinates_8hpp" startline="621" endline="624">nc::coordinates::Coordinate::radianSeperation</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a6b257d6e403f5f9003934a4fd1fb5feb" compoundref="_filter_8hpp" startline="880" endline="911">nc::filter::convolve</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a005c1e50b02c5eb7203e2e3d2d6ccc62" compoundref="_filter_8hpp" startline="927" endline="946">nc::filter::convolve1d</referencedby>
        <referencedby refid="namespacenc_1_1linalg_1a59c33bf492f64017c673a151f890dcbf" compoundref="_linalg_8hpp" startline="945" endline="988">nc::linalg::matrix_power</referencedby>
        <referencedby refid="namespacenc_1_1linalg_1a46188c640b2c3ee74418db676e8f3bce" compoundref="_linalg_8hpp" startline="1004" endline="1027">nc::linalg::multi_dot</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af6e71bd96dbc78f9ca018d2da0a7e653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::dump</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const std::string &amp;inFilename)</argsstring>
        <name>dump</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump a binary file of the array to the specified file. The array can be read back with or NC::load.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="312" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3178" bodyend="3181"/>
        <references refid="classnc_1_1_nd_array_1a1a75a88440cb5460da17b23e0dd6b030" compoundref="_nd_array_8hpp" startline="1763" endline="1782">nc::NdArray&lt; dtype &gt;::dump</references>
        <referencedby refid="classnc_1_1_nd_array_1aa94662d12c0f3558fa78344c8cfe95cd" compoundref="_nd_array_8hpp" startline="3421" endline="3455">nc::NdArray&lt; bool &gt;::tofile</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac80083317dd6664b9f4c6cbca8c41711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::empty</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>empty</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, without initializing entries.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.empty.html">https://www.numpy.org/devdocs/reference/generated/numpy.empty.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="315" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3195" bodyend="3198"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a074fa2b83cd4dd6b7ec82495dcc0d123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::empty</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>empty</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, without initializing entries.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.empty.html">https://www.numpy.org/devdocs/reference/generated/numpy.empty.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="318" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3212" bodyend="3215"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2a1e6b9bcd7f8c5cc1e5b8272337436a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::empty_like</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>empty_like</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the same shape as a given array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.empty_like.html">https://www.numpy.org/devdocs/reference/generated/numpy.empty_like.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="321" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3229" bodyend="3232"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6d1bce5e0cf3f24f84a50b945eec7a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
        <definition>Endian nc::endianess</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>endianess</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the endianess of the array values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Endian </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="324" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3244" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6891660e45d9f047bfc3a4625f4a255d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::equal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return (x1 == x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.equal.html">https://www.numpy.org/devdocs/reference/generated/numpy.equal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="333" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3336" bodyend="3339"/>
        <referencedby refid="classnc_1_1_boost_ndarray_helper_1a98ca7d60e1b0dd26f92350a3d73e940f" compoundref="_boost_numpy_ndarray_helper_8hpp" startline="262" endline="270">nc::BoostNdarrayHelper::shapeEqual</referencedby>
        <referencedby refid="classnc_1_1image_processing_1_1_cluster_1a285304797eb18228f038d26e4b6693fc" compoundref="_image_processing_8hpp" startline="305" endline="313">nc::imageProcessing::Cluster&lt; dtype &gt;::operator==</referencedby>
        <referencedby refid="namespacenc_1a0e8c1396cc01ccd9ec8ba549b6347e21" compoundref="_methods_8hpp" startline="1736" endline="1744">array_equal</referencedby>
        <referencedby refid="namespacenc_1ac7cfdea4ac1caa81eabdb5dfe33b90b8" compoundref="_methods_8hpp" startline="1762" endline="1770">array_equiv</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4f8946084eba652a3098d75675f464bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::erf</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erf</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="327" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3260" bodyend="3263"/>
        <references refid="namespacenc_1ad02c59de5f9ac67a95f84bf4547801dd" compoundref="_methods_8hpp" startline="3276" endline="3285">erf</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad02c59de5f9ac67a95f84bf4547801dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::erf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="330" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3276" bodyend="3285"/>
        <referencedby refid="namespacenc_1a4f8946084eba652a3098d75675f464bf" compoundref="_methods_8hpp" startline="3260" endline="3263">erf</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a49f7755f95035f00b24cc1628637b1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::erfc</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>erfc</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the complement of the error function of inValue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="3297" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3297" bodyend="3300"/>
        <references refid="namespacenc_1a9bcdf0fcf4c26cd05d3bccdef7e7cf49" compoundref="_methods_8hpp" startline="3313" endline="3322">erfc</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9bcdf0fcf4c26cd05d3bccdef7e7cf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::erfc</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element-wise complement of the error function of inValue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="3313" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3313" bodyend="3322"/>
        <referencedby refid="namespacenc_1a49f7755f95035f00b24cc1628637b1ec" compoundref="_methods_8hpp" startline="3297" endline="3300">erfc</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab138b681799463226a8ef60f87d30ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::exp</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>exp</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the exponential of the input value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.exp.html">https://www.numpy.org/devdocs/reference/generated/numpy.exp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="336" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3353" bodyend="3356"/>
        <references refid="namespacenc_1abb6008d399e621c112d9cc9491d34400" compoundref="_methods_8hpp" startline="3370" endline="3379">exp</references>
        <referencedby refid="namespacenc_1_1filter_1acb4710192adc0a359fc8e24410988fa3" compoundref="_filter_8hpp" startline="191" endline="197">nc::filter::gaussian</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abb6008d399e621c112d9cc9491d34400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::exp</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the exponential of all elements in the input array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.exp.html">https://www.numpy.org/devdocs/reference/generated/numpy.exp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="339" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3370" bodyend="3379"/>
        <referencedby refid="namespacenc_1ab138b681799463226a8ef60f87d30ac7" compoundref="_methods_8hpp" startline="3353" endline="3356">exp</referencedby>
        <referencedby refid="namespacenc_1a390dd897c7e7335baf71396e3c807c47" compoundref="_methods_8hpp" startline="3433" endline="3436">expm1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8c19ebd01e34b80990da5c4ccb2a3f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::exp2</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>exp2</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate 2**p for all p in the input value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.exp2.html">https://www.numpy.org/devdocs/reference/generated/numpy.exp2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="342" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3393" bodyend="3396"/>
        <references refid="namespacenc_1aac191ffa605ae2404a45e4a4bf742358" compoundref="_methods_8hpp" startline="3410" endline="3419">exp2</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aac191ffa605ae2404a45e4a4bf742358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::exp2</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>exp2</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate 2**p for all p in the input array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.exp2.html">https://www.numpy.org/devdocs/reference/generated/numpy.exp2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="345" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3410" bodyend="3419"/>
        <referencedby refid="namespacenc_1a8c19ebd01e34b80990da5c4ccb2a3f36" compoundref="_methods_8hpp" startline="3393" endline="3396">exp2</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a390dd897c7e7335baf71396e3c807c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::expm1</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>expm1</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate exp(x) - 1 for the input value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.expm1.html">https://www.numpy.org/devdocs/reference/generated/numpy.expm1.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="348" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3433" bodyend="3436"/>
        <references refid="namespacenc_1abb6008d399e621c112d9cc9491d34400" compoundref="_methods_8hpp" startline="3370" endline="3379">exp</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a04cfad92e069c625728dc3504381aaab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::expm1</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>expm1</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate exp(x) - 1 for all elements in the array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.expm1.html">https://www.numpy.org/devdocs/reference/generated/numpy.expm1.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="351" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3450" bodyend="3459"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a17495ebd52ac1b97057e27a9bf565c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::eye</definition>
        <argsstring>(uint32 inN, int32 inK=0) noexcept</argsstring>
        <name>eye</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inK</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a 2-D array with ones on the diagonal and zeros elsewhere.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.eye.html">https://www.numpy.org/devdocs/reference/generated/numpy.eye.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows and columns (N) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inK</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="354" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3475" bodyend="3478"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5a7598ad04d29699d557d77c97f7d650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::eye</definition>
        <argsstring>(uint32 inN, uint32 inM, int32 inK=0) noexcept</argsstring>
        <name>eye</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inM</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inK</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a 2-D array with ones on the diagonal and zeros elsewhere.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.eye.html">https://www.numpy.org/devdocs/reference/generated/numpy.eye.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows (N) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inM</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns (M) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inK</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="357" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3495" bodyend="3528"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad9736cf71a65f42437f580c1e98a4c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::eye</definition>
        <argsstring>(const Shape &amp;inShape, int32 inK=0) noexcept</argsstring>
        <name>eye</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inK</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a 2-D array with ones on the diagonal and zeros elsewhere.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.eye.html">https://www.numpy.org/devdocs/reference/generated/numpy.eye.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inK</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="360" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3544" bodyend="3547"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7c40717fa80c513ecbb943859d9d1ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::fillDiagonal</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, dtype inValue) noexcept</argsstring>
        <name>fillDiagonal</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill the main diagonal of the given array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fill_diagonal.html">https://www.numpy.org/devdocs/reference/generated/numpy.fill_diagonal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="363" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3559" bodyend="3569"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1add10b32e8de9d322a82929aa8418b2d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::find</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;mask, uint32 n=std::numeric_limits&lt; uint32 &gt;::max()) noexcept</argsstring>
        <name>find</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>n</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;::<ref refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" kindref="member">max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find flat indices of nonzero elements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the mask to apply to the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the first n indices to return (optional, default all)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="365" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3582" bodyend="3594"/>
        <references refid="classnc_1_1_nd_array_1ad092326b66dc867003251e80d649a771" compoundref="_nd_array_8hpp" startline="2281" endline="2295">nc::NdArray&lt; dtype &gt;::nonzero</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <referencedby refid="classnc_1_1_nd_array_1a129666b27611423b46c05c7fdbe937d4" compoundref="_nd_array_8hpp" startline="1437" endline="1474">nc::NdArray&lt; bool &gt;::contains</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af259d081804c4be2d33e3a00e937b79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::fix</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>fix</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round to nearest integer towards zero.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fix.html">https://www.numpy.org/devdocs/reference/generated/numpy.fix.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="368" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3608" bodyend="3611"/>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
        <references refid="namespacenc_1a7fe80c46fd6f4d80a1656ab592aa4888" compoundref="_methods_8hpp" startline="2208" endline="2216">ceil</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a746f3eb6d08f15cc1fc55f487a2827fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fix</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>fix</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round to nearest integer towards zero.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fix.html">https://www.numpy.org/devdocs/reference/generated/numpy.fix.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="371" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3625" bodyend="3634"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a99189dab6682ea4a593f8e402fc7c27d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::flatnonzero</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>flatnonzero</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return indices that are non-zero in the flattened version of a.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.flatnonzero.html">https://www.numpy.org/devdocs/reference/generated/numpy.flatnonzero.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="377" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3664" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afe5fec6dc86ab04cb3f464f31cc2edfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::flatten</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>flatten</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the array collapsed into one dimension.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="374" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3647" bodyend="3650"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2763bc1a854320a7f0b190b0578fc4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::flip</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>flip</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reverse the order of elements in an array along the given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.flip.html">https://www.numpy.org/devdocs/reference/generated/numpy.flip.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="380" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3681" bodyend="3714"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <referencedby refid="namespacenc_1ad18044535b3dddd0d8ffd10ae41ac396" compoundref="_methods_8hpp" startline="3728" endline="3731">fliplr</referencedby>
        <referencedby refid="namespacenc_1a649f515cc6211ba022413fb3f59c3957" compoundref="_methods_8hpp" startline="3745" endline="3748">flipud</referencedby>
        <referencedby refid="namespacenc_1afee9039247b1185f0d619017be3a6109" compoundref="_methods_8hpp" startline="7379" endline="7403">rot90</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad18044535b3dddd0d8ffd10ae41ac396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fliplr</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>fliplr</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flip array in the left/right direction.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fliplr.html">https://www.numpy.org/devdocs/reference/generated/numpy.fliplr.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="383" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3728" bodyend="3731"/>
        <references refid="namespacenc_1a2763bc1a854320a7f0b190b0578fc4d2" compoundref="_methods_8hpp" startline="3681" endline="3714">flip</references>
        <referencedby refid="namespacenc_1_1filter_1aee9c0973c07ffabdfd3fd92c3a182a90" compoundref="_filter_8hpp" startline="338" endline="353">nc::filter::reflectBoundary1d</referencedby>
        <referencedby refid="namespacenc_1_1filter_1ab4e7bce587004f88fd6d69338c1524d3" compoundref="_filter_8hpp" startline="572" endline="587">nc::filter::mirrorBoundary1d</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a005c1e50b02c5eb7203e2e3d2d6ccc62" compoundref="_filter_8hpp" startline="927" endline="946">nc::filter::convolve1d</referencedby>
        <referencedby refid="namespacenc_1afee9039247b1185f0d619017be3a6109" compoundref="_methods_8hpp" startline="7379" endline="7403">rot90</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a649f515cc6211ba022413fb3f59c3957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::flipud</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>flipud</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flip array in the up/down direction.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.flipud.html">https://www.numpy.org/devdocs/reference/generated/numpy.flipud.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="386" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3745" bodyend="3748"/>
        <references refid="namespacenc_1a2763bc1a854320a7f0b190b0578fc4d2" compoundref="_methods_8hpp" startline="3681" endline="3714">flip</references>
        <referencedby refid="namespacenc_1_1filter_1a668b6c63836542f26d963a619f5658d1" compoundref="_filter_8hpp" startline="269" endline="326">nc::filter::reflectBoundary</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a32195e6b62bfec9d92c1bbd50f34349f" compoundref="_filter_8hpp" startline="503" endline="560">nc::filter::mirrorBoundary</referencedby>
        <referencedby refid="namespacenc_1afee9039247b1185f0d619017be3a6109" compoundref="_methods_8hpp" startline="7379" endline="7403">rot90</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a832da7fc615ea4e1da7bed94a4488ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::floor</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>floor</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the floor of the input.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.floor.html">https://www.numpy.org/devdocs/reference/generated/numpy.floor.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="389" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3762" bodyend="3765"/>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
        <referencedby refid="classnc_1_1coordinates_1_1_r_a_1ab14fd57fb6ab65c4d8ca668d549a507f" compoundref="_coordinates_8hpp" startline="71" endline="86">nc::coordinates::RA::RA</referencedby>
        <referencedby refid="classnc_1_1coordinates_1_1_dec_1a63de0ff17c7f842866893fdfacd0edb7" compoundref="_coordinates_8hpp" startline="239" endline="257">nc::coordinates::Dec::Dec</referencedby>
        <referencedby refid="namespacenc_1_1image_processing_1a356989d12dda6e1b0748d22d50d4ecaa" compoundref="_image_processing_8hpp" startline="1295" endline="1384">nc::imageProcessing::generateThreshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::floor</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the floor of the input, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.floor.html">https://www.numpy.org/devdocs/reference/generated/numpy.floor.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="392" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3779" bodyend="3788"/>
        <referencedby refid="namespacenc_1af259d081804c4be2d33e3a00e937b79c" compoundref="_methods_8hpp" startline="3608" endline="3611">fix</referencedby>
        <referencedby refid="namespacenc_1a832da7fc615ea4e1da7bed94a4488ea6" compoundref="_methods_8hpp" startline="3762" endline="3765">floor</referencedby>
        <referencedby refid="namespacenc_1ae8e2b2ae79d7a56eefd11986a6de9b21" compoundref="_methods_8hpp" startline="3802" endline="3805">floor_divide</referencedby>
        <referencedby refid="namespacenc_1a2cf08c4e457f7b13ce36325c5d72ab7e" compoundref="_methods_8hpp" startline="5863" endline="6035">nanpercentile</referencedby>
        <referencedby refid="namespacenc_1a70a98622a4f6890bd7794a3d6451561b" compoundref="_methods_8hpp" startline="6525" endline="6650">percentile</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae8e2b2ae79d7a56eefd11986a6de9b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::floor_divide</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>floor_divide</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the largest integer smaller or equal to the division of the inputs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.floor_divide.html">https://www.numpy.org/devdocs/reference/generated/numpy.floor_divide.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="395" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3802" bodyend="3805"/>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9774a32e67a68ebbae6aeba13184b2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::floor_divide</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>floor_divide</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the largest integer smaller or equal to the division of the inputs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.floor_divide.html">https://www.numpy.org/devdocs/reference/generated/numpy.floor_divide.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="398" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3819" bodyend="3822"/>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aebbd1fbc64f00fdeaae6c8cfdf6a7f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::fmax</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>fmax</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maximum of inputs.</para><para>Compare two value and returns a value containing the maxima</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="401" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3839" bodyend="3842"/>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a385b0eb2a2b01a24655c1056efa0904b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fmax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>fmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise maximum of array elements.</para><para>Compare two arrays and returns a new array containing the element - wise maxima</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="404" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3859" bodyend="3875"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7cd8e4c771d0676279f506f9d7e949e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::fmin</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>fmin</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>minimum of inputs.</para><para>Compare two value and returns a value containing the minima</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="407" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3892" bodyend="3895"/>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a049faefb421bb143fb6f07403adf9abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fmin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>fmin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise minimum of array elements.</para><para>Compare two arrays and returns a new array containing the element - wise minima</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="410" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3912" bodyend="3928"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4208e3d02b9bc915767eab689c64b30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::fmod</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>fmod</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the remainder of division.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmod.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="413" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3943" bodyend="3949"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a31e0d2c99574826098d4a1ac984ca5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fmod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the element-wise remainder of division.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fmod.html">https://www.numpy.org/devdocs/reference/generated/numpy.fmod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="416" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3964" bodyend="3983"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a20dbade690db6dcc52a2a82d38d61ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::frombuffer</definition>
        <argsstring>(char *inBufferPtr, uint32 inNumBytes) noexcept</argsstring>
        <name>frombuffer</name>
        <param>
          <type>char *</type>
          <declname>inBufferPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interpret a buffer as a 1-dimensional array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.frombuffer.html">https://www.numpy.org/devdocs/reference/generated/numpy.frombuffer.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inBufferPtr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBytes</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="419" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="3997" bodyend="4000"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af884ea4beb54b9a18bc116fe40ec4b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fromfile</definition>
        <argsstring>(const std::string &amp;inFilename, const std::string &amp;inSep=&quot;&quot;)</argsstring>
        <name>fromfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inSep</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an array from data in a text or binary file.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fromfile.html">https://www.numpy.org/devdocs/reference/generated/numpy.fromfile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator between items if file is a text file. Empty (&quot;&quot;) separator means the file should be treated as binary. Right now the only supported seperators are &quot; &quot;, &quot;\t&quot;, &quot;\n&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="422" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4016" bodyend="4092"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac016da417ab4a6cd6cd3b9a8a0c8c62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::fromiter</definition>
        <argsstring>(Iter inBegin, Iter inEnd) noexcept</argsstring>
        <name>fromiter</name>
        <param>
          <type>Iter</type>
          <declname>inBegin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>inEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new 1-dimensional array from an iterable object.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.fromiter.html">https://www.numpy.org/devdocs/reference/generated/numpy.fromiter.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inBegin</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inEnd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="425" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4106" bodyend="4114"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3bc36aca391389298e395f6840c48fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::full</definition>
        <argsstring>(uint32 inSquareSize, dtype inFillValue) noexcept</argsstring>
        <name>full</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with inFillValue</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.full.html">https://www.numpy.org/devdocs/reference/generated/numpy.full.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="428" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4128" bodyend="4133"/>
        <references refid="classnc_1_1_nd_array_1af4df4f7926dbd7543dbf97855a71764e" compoundref="_nd_array_8hpp" startline="1820" endline="1823">nc::NdArray&lt; dtype &gt;::fill</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4c4ac617e83250720605856ec619f40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::full</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols, dtype inFillValue) noexcept</argsstring>
        <name>full</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with inFillValue</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.full.html">https://www.numpy.org/devdocs/reference/generated/numpy.full.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="431" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4148" bodyend="4153"/>
        <references refid="classnc_1_1_nd_array_1af4df4f7926dbd7543dbf97855a71764e" compoundref="_nd_array_8hpp" startline="1820" endline="1823">nc::NdArray&lt; dtype &gt;::fill</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::full</definition>
        <argsstring>(const Shape &amp;inShape, dtype inFillValue) noexcept</argsstring>
        <name>full</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with inFillValue</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.full.html">https://www.numpy.org/devdocs/reference/generated/numpy.full.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="434" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4167" bodyend="4170"/>
        <referencedby refid="namespacenc_1a2f8a80e13b76b380bde7b2406a81a907" compoundref="_methods_8hpp" startline="4184" endline="4187">full_like</referencedby>
        <referencedby refid="namespacenc_1a5b60ee2c61a7a6bf2b368c15813f02fe" compoundref="_methods_8hpp" startline="6070" endline="6073">nans</referencedby>
        <referencedby refid="namespacenc_1a7029eded803de3acb5a9d949c56db307" compoundref="_methods_8hpp" startline="6396" endline="6399">ones</referencedby>
        <referencedby refid="namespacenc_1abfde704ef23d1c8d937f1afcc1622fbe" compoundref="_methods_8hpp" startline="8850" endline="8853">zeros</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2f8a80e13b76b380bde7b2406a81a907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::full_like</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, dtype inFillValue) noexcept</argsstring>
        <name>full_like</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a full array with the same shape and type as a given array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.full_like.html">https://www.numpy.org/devdocs/reference/generated/numpy.full_like.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="437" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4184" bodyend="4187"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a45b5db91eb9f524459fa3878e23ca0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::gcd</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>gcd</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the greatest common divisor of |x1| and |x2|</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.gcd.html">https://www.numpy.org/devdocs/reference/generated/numpy.gcd.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtype </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="440" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4201" bodyend="4205"/>
        <references refid="namespacenc_1abb00c960bb157ef6a8b15fb01a20955e" compoundref="_methods_8hpp" startline="4219" endline="4223">gcd</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abb00c960bb157ef6a8b15fb01a20955e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::gcd</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>gcd</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the greatest common divisor of the values in the input array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.gcd.html">https://www.numpy.org/devdocs/reference/generated/numpy.gcd.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="443" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4219" bodyend="4223"/>
        <referencedby refid="namespacenc_1a45b5db91eb9f524459fa3878e23ca0ec" compoundref="_methods_8hpp" startline="4201" endline="4205">gcd</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acd531e597e05821b01747a0ae3b096b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::gradient</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::ROW)</argsstring>
        <name>gradient</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the gradient of the array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.gradient.html">https://www.numpy.org/devdocs/reference/generated/numpy.gradient.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(default ROW) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="446" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4238" bodyend="4321"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5a3294d00ff310b4d95b0292adafc94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::greater</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truth value of (x1 &gt; x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.greater.html">https://www.numpy.org/devdocs/reference/generated/numpy.greater.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="449" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4336" bodyend="4339"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6ecdbcd9d151ddda0b7b4f51f29bf08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::greater_equal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>greater_equal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truth value of (x1 &gt;= x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.greater_equal.html">https://www.numpy.org/devdocs/reference/generated/numpy.greater_equal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="452" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4354" bodyend="4357"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a49ca5ca0de10a6321946fb1f41e39ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &gt;</type>
        <definition>std::pair&lt; NdArray&lt; uint32 &gt;, NdArray&lt; double &gt; &gt; nc::histogram</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumBins=10)</argsstring>
        <name>histogram</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumBins</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the histogram of a set of data.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.histogram.html">https://www.numpy.org/devdocs/reference/generated/numpy.histogram.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBins(</parametername>
</parameternamelist>
<parameterdescription>
<para>default 10)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair of NdArrays; first is histogram counts, seconds is the bin edges </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="455" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4373" bodyend="4422"/>
        <references refid="namespacenc_1a0c81830eeffe6bc1e01e1126e80d5000" compoundref="_methods_8hpp" startline="4937" endline="5000">linspace</references>
        <references refid="classnc_1_1_nd_array_1a7a863a1318f753addcf8163191085061" compoundref="_nd_array_8hpp" startline="1967" endline="2004">nc::NdArray&lt; dtype &gt;::min</references>
        <references refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" compoundref="_nd_array_8hpp" startline="1917" endline="1954">nc::NdArray&lt; dtype &gt;::max</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <referencedby refid="namespacenc_1_1image_processing_1a356989d12dda6e1b0748d22d50d4ecaa" compoundref="_image_processing_8hpp" startline="1295" endline="1384">nc::imageProcessing::generateThreshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2f1b55ae1381a85f64d781b979e77c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::hstack</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList)</argsstring>
        <name>hstack</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stack arrays in sequence horizontally (column wise).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.hstack.html">https://www.numpy.org/devdocs/reference/generated/numpy.hstack.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para>{list} of arrays to stack</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="458" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4438" bodyend="4441"/>
        <references refid="namespacenc_1a1fd4b60fc74fcb37dff8faa08e877241" compoundref="_methods_8hpp" startline="2266" endline="2305">column_stack</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4648674053cd83851d9549bbcc7a8481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::hypot</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>hypot</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given the &quot;legs&quot; of a right triangle, return its hypotenuse.</para><para>Equivalent to sqrt(x1**2 + x2 * *2), element - wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.hypot.html">https://www.numpy.org/devdocs/reference/generated/numpy.hypot.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="461" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4459" bodyend="4462"/>
        <references refid="namespacenc_1ab847598f9e2e08106edd8c6ae3fa2f7a" compoundref="_methods_8hpp" startline="4480" endline="4496">hypot</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab847598f9e2e08106edd8c6ae3fa2f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::hypot</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>hypot</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given the &quot;legs&quot; of a right triangle, return its hypotenuse.</para><para>Equivalent to sqrt(x1**2 + x2**2), element - wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.hypot.html">https://www.numpy.org/devdocs/reference/generated/numpy.hypot.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="464" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4480" bodyend="4496"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1a4648674053cd83851d9549bbcc7a8481" compoundref="_methods_8hpp" startline="4459" endline="4462">hypot</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4791b3c25d3a9466370ad494c63dcf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::identity</definition>
        <argsstring>(uint32 inSquareSize) noexcept</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the identity array.</para><para>The identity array is a square array with ones on the main diagonal.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.identity.html">https://www.numpy.org/devdocs/reference/generated/numpy.identity.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="467" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4513" bodyend="4523"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1ed1aa8a0b9dbedc1438dc575d2236a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::interp</definition>
        <argsstring>(dtype inValue1, dtype inValue2, double inPercent) noexcept</argsstring>
        <name>interp</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inPercent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the linear interpolation between two points</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPercent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear interpolated point </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="470" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4535" bodyend="4538"/>
        <references refid="namespacenc_1acb0128da9c31422e62814a91d2075d9d" compoundref="_methods_8hpp" startline="4559" endline="4609">interp</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acb0128da9c31422e62814a91d2075d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::interp</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inX, const NdArray&lt; dtype &gt; &amp;inXp, const NdArray&lt; dtype &gt; &amp;inFp)</argsstring>
        <name>interp</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inXp</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inFp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>One-dimensional linear interpolation.</para><para>Returns the one - dimensional piecewise linear interpolant to a function with given values at discrete data - points. If input arrays are not one dimensional they will be internally flattened.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.interp.html">https://www.numpy.org/devdocs/reference/generated/numpy.interp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinates at which to evaluate the interpolated values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inXp</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinates of the data points, must be increasing. Otherwise, xp is internally sorted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFp</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinates of the data points, same length as inXp.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="473" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4559" bodyend="4609"/>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1a7a863a1318f753addcf8163191085061" compoundref="_nd_array_8hpp" startline="1967" endline="2004">nc::NdArray&lt; dtype &gt;::min</references>
        <references refid="classnc_1_1_nd_array_1a1da78e30bcb54c80c887b454a2342d42" compoundref="_nd_array_8hpp" startline="1917" endline="1954">nc::NdArray&lt; dtype &gt;::max</references>
        <references refid="namespacenc_1af1f9dbd430ee0b6dcb7330d092a79d61" compoundref="_methods_8hpp" startline="1667" endline="1670">argsort</references>
        <references refid="namespacenc_1ab3e511ec0e360b85ecbb2879f29fc829" compoundref="_methods_8hpp" startline="7775" endline="7780">sort</references>
        <referencedby refid="namespacenc_1a1ed1aa8a0b9dbedc1438dc575d2236a1" compoundref="_methods_8hpp" startline="4535" endline="4538">interp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a35cdd4bb265142ff795a9990ed42a5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::intersect1d</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>intersect1d</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the intersection of two arrays.</para><para>Return the sorted, unique values that are in both of the input arrays.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.intersect1d.html">https://www.numpy.org/devdocs/reference/generated/numpy.intersect1d.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="476" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4626" bodyend="4636"/>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3d5be28a3c008a2cb248ba3466efb616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::invert</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute bit-wise inversion, or bit-wise NOT, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.invert.html">https://www.numpy.org/devdocs/reference/generated/numpy.invert.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="479" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4651" bodyend="4654"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a81969bd9383c15d95e6b2150dac1eda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::isclose</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2, double inRtol=1e-05, double inAtol=1e-08)</argsstring>
        <name>isclose</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inRtol</declname>
          <defval>1e-05</defval>
        </param>
        <param>
          <type>double</type>
          <declname>inAtol</declname>
          <defval>1e-08</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a boolean array where two arrays are element-wise equal within a tolerance.</para><para>For finite values, isclose uses the following equation to test whether two floating point values are equivalent. absolute(a - b) &lt;= (atol + rtol * absolute(b))</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.isclose.html">https://www.numpy.org/devdocs/reference/generated/numpy.isclose.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inRtol</parametername>
</parameternamelist>
<parameterdescription>
<para>relative tolerance (default 1e-5) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAtol</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute tolerance (default 1e-9)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="482" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4675" bodyend="4690"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1a5251a8cc0a2a09fd87c66149e1172244" compoundref="_methods_8hpp" startline="984" endline="991">abs</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac2770d614de64c300c2f10cb39a299c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::isinf</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>isinf</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test for inf and return result as a boolean.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.isinf.html">https://www.numpy.org/devdocs/reference/generated/numpy.isinf.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="486" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4705" bodyend="4708"/>
        <references refid="namespacenc_1ac4fc33403639972fc780fed688020f5f" compoundref="_methods_8hpp" startline="4723" endline="4731">isinf</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac4fc33403639972fc780fed688020f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::isinf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>isinf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test element-wise for inf and return result as a boolean array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.isinf.html">https://www.numpy.org/devdocs/reference/generated/numpy.isinf.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="489" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4723" bodyend="4731"/>
        <referencedby refid="namespacenc_1ac2770d614de64c300c2f10cb39a299c0" compoundref="_methods_8hpp" startline="4705" endline="4708">isinf</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac28569da874c0b37a4c50c86b31a98ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::isnan</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>isnan</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test for NaN and return result as a boolean.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.isnan.html">https://www.numpy.org/devdocs/reference/generated/numpy.isnan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="492" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4746" bodyend="4750"/>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::isnan</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>isnan</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test element-wise for NaN and return result as a boolean array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.isnan.html">https://www.numpy.org/devdocs/reference/generated/numpy.isnan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="495" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4765" bodyend="4775"/>
        <referencedby refid="namespacenc_1ac28569da874c0b37a4c50c86b31a98ab" compoundref="_methods_8hpp" startline="4746" endline="4750">isnan</referencedby>
        <referencedby refid="namespacenc_1a75582227790ce0c16c908a6a7b9ac53f" compoundref="_methods_8hpp" startline="5560" endline="5568">nanargmax</referencedby>
        <referencedby refid="namespacenc_1a611f45f3b09290d0d6e6c91a2c01ee19" compoundref="_methods_8hpp" startline="5582" endline="5590">nanargmin</referencedby>
        <referencedby refid="namespacenc_1ae63aa8899b29a16b3a5916a046034d27" compoundref="_methods_8hpp" startline="5604" endline="5612">nancumprod</referencedby>
        <referencedby refid="namespacenc_1a818b47bb2f6a404be808defd8d3d322a" compoundref="_methods_8hpp" startline="5626" endline="5634">nancumsum</referencedby>
        <referencedby refid="namespacenc_1a8b1f7cdec4baa7da045ef962651c0e87" compoundref="_methods_8hpp" startline="5649" endline="5657">nanmax</referencedby>
        <referencedby refid="namespacenc_1ab422b1ce1e6f64bac61882f142373645" compoundref="_methods_8hpp" startline="5672" endline="5736">nanmean</referencedby>
        <referencedby refid="namespacenc_1a59bb4a3d7f8626712b6fc1f25d5a0462" compoundref="_methods_8hpp" startline="5751" endline="5824">nanmedian</referencedby>
        <referencedby refid="namespacenc_1ac1686f4cf34cc5ddc758a477484e666c" compoundref="_methods_8hpp" startline="5839" endline="5847">nanmin</referencedby>
        <referencedby refid="namespacenc_1a2cf08c4e457f7b13ce36325c5d72ab7e" compoundref="_methods_8hpp" startline="5863" endline="6035">nanpercentile</referencedby>
        <referencedby refid="namespacenc_1ac41354272013b08c351434698e7d4642" compoundref="_methods_8hpp" startline="6050" endline="6058">nanprod</referencedby>
        <referencedby refid="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" compoundref="_methods_8hpp" startline="6135" endline="6213">nanstdev</referencedby>
        <referencedby refid="namespacenc_1a93998901718915088ee07495c0322c06" compoundref="_methods_8hpp" startline="6228" endline="6236">nansum</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7ffd0c15b8419a5d84458d4009b38b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::lcm</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>lcm</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the least common multiple of |x1| and |x2|</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.lcm.html">https://www.numpy.org/devdocs/reference/generated/numpy.lcm.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtype </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="498" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4789" bodyend="4793"/>
        <references refid="namespacenc_1a631b0ddbe680dd8ae3240afa5e64fb63" compoundref="_methods_8hpp" startline="4806" endline="4810">lcm</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae01e27fa38d4631afd5d08d6d8a13fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::lcm</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2) noexcept</argsstring>
        <name>lcm</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a631b0ddbe680dd8ae3240afa5e64fb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::lcm</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>lcm</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the least common multiple of the values of the input array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.lcm.html">https://www.numpy.org/devdocs/reference/generated/numpy.lcm.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="4806" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4806" bodyend="4810"/>
        <referencedby refid="namespacenc_1a7ffd0c15b8419a5d84458d4009b38b88" compoundref="_methods_8hpp" startline="4789" endline="4793">lcm</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aca805ef0273314ddc6c70b2c913bf485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::ldexp</definition>
        <argsstring>(dtype inValue1, uint8 inValue2) noexcept</argsstring>
        <name>ldexp</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns x1 * 2^x2.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ldexp.html">https://www.numpy.org/devdocs/reference/generated/numpy.ldexp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="504" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4825" bodyend="4828"/>
        <references refid="namespacenc_1af63d2ed4015f416db1734593d322941a" compoundref="_methods_8hpp" startline="4843" endline="4858">ldexp</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af63d2ed4015f416db1734593d322941a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ldexp</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; uint8 &gt; &amp;inArray2)</argsstring>
        <name>ldexp</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns x1 * 2^x2, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ldexp.html">https://www.numpy.org/devdocs/reference/generated/numpy.ldexp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="507" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4843" bodyend="4858"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1aca805ef0273314ddc6c70b2c913bf485" compoundref="_methods_8hpp" startline="4825" endline="4828">ldexp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab2427ed627f2d4b860a5cc375957e82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::left_shift</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inNumBits) noexcept</argsstring>
        <name>left_shift</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the bits of an integer to the left.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.left_shift.html">https://www.numpy.org/devdocs/reference/generated/numpy.left_shift.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="510" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4873" bodyend="4876"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a214ff1cf329d515457a611f0be8e9bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::less</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truth value of (x1 &lt; x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.less.html">https://www.numpy.org/devdocs/reference/generated/numpy.less.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="513" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4891" bodyend="4894"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a052d0b4471adf86a70d91430ccb4873d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::less_equal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>less_equal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truth value of (x1 &lt;= x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.less_equal.html">https://www.numpy.org/devdocs/reference/generated/numpy.less_equal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="516" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4909" bodyend="4912"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0c81830eeffe6bc1e01e1126e80d5000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::linspace</definition>
        <argsstring>(dtype inStart, dtype inStop, uint32 inNum=50, bool endPoint=true)</argsstring>
        <name>linspace</name>
        <param>
          <type>dtype</type>
          <declname>inStart</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inStop</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNum</declname>
          <defval>50</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>endPoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return evenly spaced numbers over a specified interval.</para><para>Returns num evenly spaced samples, calculated over the interval[start, stop].</para><para>The endpoint of the interval can optionally be excluded.</para><para>Mostly only usefull if called with a floating point type for the template argument.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.linspace.html">https://www.numpy.org/devdocs/reference/generated/numpy.linspace.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStart</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStop</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of points (default = 50) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>include endPoint (default = true)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="519" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="4937" bodyend="5000"/>
        <referencedby refid="namespacenc_1a49ca5ca0de10a6321946fb1f41e39ed3" compoundref="_methods_8hpp" startline="4373" endline="4422">histogram</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aff624e52b19d4e64228e1654cb4bbb1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; nc::list2vector</definition>
        <argsstring>(const boost::python::list &amp;inList) noexcept</argsstring>
        <name>list2vector</name>
        <param>
          <type>const boost::python::list &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>converts a boost python list to a std::vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="137" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad6129b92b4e017a4ca772a59b43960e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::load</definition>
        <argsstring>(const std::string &amp;inFilename)</argsstring>
        <name>load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>loads a .bin file from the <ref refid="namespacenc_1af6e71bd96dbc78f9ca018d2da0a7e653" kindref="member">dump()</ref> method into an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref></para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.load.html">https://www.numpy.org/devdocs/reference/generated/numpy.load.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="522" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5015" bodyend="5018"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afe601bfe09694a30d40e5778de8fb5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::log</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>log</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Natural logarithm.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log.html">https://www.numpy.org/devdocs/reference/generated/numpy.log.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="525" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5033" bodyend="5036"/>
        <references refid="namespacenc_1a1f125f30a5b9d1063785ce7160c9595e" compoundref="_methods_8hpp" startline="5051" endline="5059">log</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1f125f30a5b9d1063785ce7160c9595e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::log</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Natural logarithm, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log.html">https://www.numpy.org/devdocs/reference/generated/numpy.log.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="528" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5051" bodyend="5059"/>
        <referencedby refid="namespacenc_1afe601bfe09694a30d40e5778de8fb5e7" compoundref="_methods_8hpp" startline="5033" endline="5036">log</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2fcd64afc1a4d6f7e5f1863356e1a79f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::log10</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>log10</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the base 10 logarithm of the input array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log10.html">https://www.numpy.org/devdocs/reference/generated/numpy.log10.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="531" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5074" bodyend="5077"/>
        <references refid="namespacenc_1a84621b40523eac0899d5e9771fc23361" compoundref="_methods_8hpp" startline="5092" endline="5100">log10</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a84621b40523eac0899d5e9771fc23361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::log10</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the base 10 logarithm of the input array, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log10.html">https://www.numpy.org/devdocs/reference/generated/numpy.log10.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="534" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5092" bodyend="5100"/>
        <referencedby refid="namespacenc_1a2fcd64afc1a4d6f7e5f1863356e1a79f" compoundref="_methods_8hpp" startline="5074" endline="5077">log10</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af62a0af0394ed6cd4f523f222e7f27ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::log1p</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>log1p</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the natural logarithm of one plus the input array.</para><para>Calculates log(1 + x).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log1p.html">https://www.numpy.org/devdocs/reference/generated/numpy.log1p.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="537" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5117" bodyend="5120"/>
        <references refid="namespacenc_1abc81ca59c7b79350114cee9fa60c2578" compoundref="_methods_8hpp" startline="5137" endline="5145">log1p</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abc81ca59c7b79350114cee9fa60c2578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::log1p</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>log1p</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the natural logarithm of one plus the input array, element-wise.</para><para>Calculates log(1 + x).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log1p.html">https://www.numpy.org/devdocs/reference/generated/numpy.log1p.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="540" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5137" bodyend="5145"/>
        <referencedby refid="namespacenc_1af62a0af0394ed6cd4f523f222e7f27ef" compoundref="_methods_8hpp" startline="5117" endline="5120">log1p</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8c63695b0ff58abd9437c5894ae60062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::log2</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>log2</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Base-2 logarithm of x.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log2.html">https://www.numpy.org/devdocs/reference/generated/numpy.log2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="543" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5160" bodyend="5163"/>
        <references refid="namespacenc_1a878a7255f135befe85730c256f213385" compoundref="_methods_8hpp" startline="5178" endline="5186">log2</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a878a7255f135befe85730c256f213385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::log2</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>log2</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Base-2 logarithm of x.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.log2.html">https://www.numpy.org/devdocs/reference/generated/numpy.log2.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="546" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5178" bodyend="5186"/>
        <referencedby refid="namespacenc_1a8c63695b0ff58abd9437c5894ae60062" compoundref="_methods_8hpp" startline="5160" endline="5163">log2</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a453e2ee3176ab6e44183872ff41a60e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::logical_and</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>logical_and</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the truth value of x1 AND x2 element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.logical_and.html">https://www.numpy.org/devdocs/reference/generated/numpy.logical_and.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="549" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5201" bodyend="5216"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2afe0aafbe673372a7b049a9561a1b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::logical_not</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>logical_not</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the truth value of NOT x element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.logical_not.html">https://www.numpy.org/devdocs/reference/generated/numpy.logical_not.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="552" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5231" bodyend="5239"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a62d069e9c46eda68c15946a3fa74b1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::logical_or</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>logical_or</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the truth value of x1 OR x2 element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.logical_or.html">https://www.numpy.org/devdocs/reference/generated/numpy.logical_or.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="555" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5254" bodyend="5269"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aae5c773c4e480fc760781013a8def13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::logical_xor</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>logical_xor</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the truth value of x1 XOR x2 element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.logical_xor.html">https://www.numpy.org/devdocs/reference/generated/numpy.logical_xor.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="558" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5284" bodyend="5299"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad0110c42ec3efc6f79199b3b07519b85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class Value</type>
          </param>
        </templateparamlist>
        <type>boost::python::dict</type>
        <definition>boost::python::dict nc::map2dict</definition>
        <argsstring>(const std::map&lt; Key, Value &gt; &amp;inMap) noexcept</argsstring>
        <name>map2dict</name>
        <param>
          <type>const std::map&lt; Key, Value &gt; &amp;</type>
          <declname>inMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>converts a std::map in to a boost python dictionary</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMap</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boost::python::dict </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="169" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="169" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a666207bcb1e7fe5993aa707cfd8b1f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::matmul</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>matmul</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matrix product of two arrays.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.matmul.html">https://www.numpy.org/devdocs/reference/generated/numpy.matmul.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="561" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5314" bodyend="5317"/>
        <references refid="classnc_1_1_nd_array_1a13e5756a193d375c0b52e5929a41ca2f" compoundref="_nd_array_8hpp" startline="1719" endline="1751">nc::NdArray&lt; dtype &gt;::dot</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aea39f46713d556f182a9cd82c9338113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::max</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum of an array or maximum along an axis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="564" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5330" bodyend="5333"/>
        <referencedby refid="classnc_1_1_dtype_info_1a2a3dc0ba2812411660219f61189d8aca" compoundref="_dtype_info_8hpp" startline="98" endline="101">nc::DtypeInfo&lt; dtype &gt;::max</referencedby>
        <referencedby refid="namespacenc_1_1filter_1ad167f1f3b185f666c70d2e2dc9d21024" compoundref="_filter_8hpp" startline="962" endline="1004">nc::filter::gaussianFilter</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a03cc5a48e29d6f25636789b65366f243" compoundref="_filter_8hpp" startline="1020" endline="1057">nc::filter::gaussianFilter1d</referencedby>
        <referencedby refid="namespacenc_1_1image_processing_1a6613333b700d2e8c41f1a60505bc9715" compoundref="_image_processing_8hpp" startline="1395" endline="1424">nc::imageProcessing::windowExceedances</referencedby>
        <referencedby refid="namespacenc_1a0277d104fe80e8190cc4e1326772e768" compoundref="_methods_8hpp" startline="1968" endline="1997">bincount</referencedby>
        <referencedby refid="namespacenc_1aebbd1fbc64f00fdeaae6c8cfdf6a7f59" compoundref="_methods_8hpp" startline="3839" endline="3842">fmax</referencedby>
        <referencedby refid="namespacenc_1a2020a56b0977393a81377f4b64d62252" compoundref="_methods_8hpp" startline="5349" endline="5364">maximum</referencedby>
        <referencedby refid="namespacenc_1a611f45f3b09290d0d6e6c91a2c01ee19" compoundref="_methods_8hpp" startline="5582" endline="5590">nanargmin</referencedby>
        <referencedby refid="namespacenc_1a8b1f7cdec4baa7da045ef962651c0e87" compoundref="_methods_8hpp" startline="5649" endline="5657">nanmax</referencedby>
        <referencedby refid="namespacenc_1ac1686f4cf34cc5ddc758a477484e666c" compoundref="_methods_8hpp" startline="5839" endline="5847">nanmin</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2020a56b0977393a81377f4b64d62252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::maximum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>maximum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise maximum of array elements.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.maximum.html">https://www.numpy.org/devdocs/reference/generated/numpy.maximum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="567" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5349" bodyend="5364"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7470b6224fdf388c03577cfe3a00e31d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::mean</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the mean along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.mean.html">https://www.numpy.org/devdocs/reference/generated/numpy.mean.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="570" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5379" bodyend="5382"/>
        <references refid="classnc_1_1_nd_array_1a6e6476097ba788402df110a2a3e8e12a" compoundref="_nd_array_8hpp" startline="2017" endline="2058">nc::NdArray&lt; dtype &gt;::mean</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1521e079b2dd3f8946133f8b12169b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::median</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the median along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.median.html">https://www.numpy.org/devdocs/reference/generated/numpy.median.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="573" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5397" bodyend="5400"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0b4f10c451d90609f4f9f4e83afaa5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt;</type>
        <definition>std::pair&lt; NdArray&lt; dtype &gt;, NdArray&lt; dtype &gt; &gt; nc::meshgrid</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2) noexcept</argsstring>
        <name>meshgrid</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
          <defname>inICoords</defname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
          <defname>inJCoords</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return coordinate matrices from coordinate vectors. Make 2D coordinate arrays for vectorized evaluations of 2D scalar vector fields over 2D grids, given one - dimensional coordinate arrays x1, x2, ..., xn. If input arrays are not one dimensional they will be flattened.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.meshgrid.html">https://www.numpy.org/devdocs/reference/generated/numpy.meshgrid.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inICoords</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inJCoords</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;NdArray&lt;dtype&gt;, NdArray&lt;dtype&gt; &gt;, i and j matrices </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="576" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5418" bodyend="5444"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a92d65be6d454020492389d91ed4c28c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt;</type>
        <definition>std::pair&lt; NdArray&lt; dtype &gt;, NdArray&lt; dtype &gt; &gt; nc::meshgrid</definition>
        <argsstring>(const Slice &amp;inSlice1, const Slice &amp;inSlice2) noexcept</argsstring>
        <name>meshgrid</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return coordinate matrices from coordinate vectors. Make 2D coordinate arrays for vectorized evaluations of 2D scalar vector fields over 2D grids, given one - dimensional coordinate arrays x1, x2, ..., xn.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.meshgrid.html">https://www.numpy.org/devdocs/reference/generated/numpy.meshgrid.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSlice2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;NdArray&lt;dtype&gt;, NdArray&lt;dtype&gt; &gt;, i and j matrices </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="579" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5461" bodyend="5464"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::min</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the minimum of an array or maximum along an axis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="582" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5477" bodyend="5480"/>
        <referencedby refid="classnc_1_1_dtype_info_1ab566f68bc6b82c06b5a3df887f87ab74" compoundref="_dtype_info_8hpp" startline="88" endline="91">nc::DtypeInfo&lt; dtype &gt;::min</referencedby>
        <referencedby refid="namespacenc_1a7cd8e4c771d0676279f506f9d7e949e0" compoundref="_methods_8hpp" startline="3892" endline="3895">fmin</referencedby>
        <referencedby refid="namespacenc_1a36c2bae02fa93658d5f9268018de444f" compoundref="_methods_8hpp" startline="5495" endline="5510">minimum</referencedby>
        <referencedby refid="namespacenc_1a75582227790ce0c16c908a6a7b9ac53f" compoundref="_methods_8hpp" startline="5560" endline="5568">nanargmax</referencedby>
        <referencedby refid="namespacenc_1a8b1f7cdec4baa7da045ef962651c0e87" compoundref="_methods_8hpp" startline="5649" endline="5657">nanmax</referencedby>
        <referencedby refid="namespacenc_1ac1686f4cf34cc5ddc758a477484e666c" compoundref="_methods_8hpp" startline="5839" endline="5847">nanmin</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a36c2bae02fa93658d5f9268018de444f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::minimum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>minimum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element-wise minimum of array elements.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.minimum.html">https://www.numpy.org/devdocs/reference/generated/numpy.minimum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="585" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5495" bodyend="5510"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afeea794af5fd07c9ce88cdabab63ae53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::mod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>mod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return element-wise remainder of division.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.mod.html">https://www.numpy.org/devdocs/reference/generated/numpy.mod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="588" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5525" bodyend="5528"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae574e8cd3ecbd5736c9707196f29c985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::multiply</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply arguments element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.multiply.html">https://www.numpy.org/devdocs/reference/generated/numpy.multiply.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="591" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5543" bodyend="5546"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a75582227790ce0c16c908a6a7b9ac53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::nanargmax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanargmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices of the maximum values along an axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanargmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanargmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="594" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5560" bodyend="5568"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
        <references refid="namespacenc_1af52bc3de3aa137cd5c5ce233ad42f3b0" compoundref="_methods_8hpp" startline="1633" endline="1636">argmax</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a611f45f3b09290d0d6e6c91a2c01ee19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::nanargmin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanargmin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices of the minimum values along an axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanargmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanargmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="597" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5582" bodyend="5590"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
        <references refid="namespacenc_1a3b6d30ed28a5139b97adf122cedc536d" compoundref="_methods_8hpp" startline="1650" endline="1653">argmin</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae63aa8899b29a16b3a5916a046034d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nancumprod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nancumprod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative product of elements along a given axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nancumprod.html">https://www.numpy.org/devdocs/reference/generated/numpy.nancumprod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="600" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5604" bodyend="5612"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1a62e0bd76c4df1bb03d9e55566713b191" compoundref="_methods_8hpp" startline="2755" endline="2758">cumprod</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a818b47bb2f6a404be808defd8d3d322a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nancumsum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nancumsum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative sum of the elements along a given axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nancumsum.html">https://www.numpy.org/devdocs/reference/generated/numpy.nancumsum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="603" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5626" bodyend="5634"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1afb98157ff8c733d7c24252a51e75104a" compoundref="_methods_8hpp" startline="2772" endline="2775">cumsum</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8b1f7cdec4baa7da045ef962651c0e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nanmax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum of an array or maximum along an axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanmax.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="606" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5649" bodyend="5657"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab422b1ce1e6f64bac61882f142373645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nanmean</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanmean</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the mean along the specified axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanmean.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanmean.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="609" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5672" bodyend="5736"/>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" compoundref="_methods_8hpp" startline="6135" endline="6213">nanstdev</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a59bb4a3d7f8626712b6fc1f25d5a0462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nanmedian</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanmedian</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the median along the specified axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanmedian.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanmedian.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="612" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5751" bodyend="5824"/>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac1686f4cf34cc5ddc758a477484e666c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nanmin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanmin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the minimum of an array or maximum along an axis ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanmin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="615" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5839" bodyend="5847"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1aea39f46713d556f182a9cd82c9338113" compoundref="_methods_8hpp" startline="5330" endline="5333">max</references>
        <references refid="namespacenc_1ae893a242e94f0da5f9cf31afde5051fe" compoundref="_methods_8hpp" startline="5477" endline="5480">min</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2cf08c4e457f7b13ce36325c5d72ab7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nanpercentile</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, double inPercentile, Axis inAxis=Axis::NONE, const std::string &amp;inInterpMethod=&quot;linear&quot;)</argsstring>
        <name>nanpercentile</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inPercentile</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inInterpMethod</declname>
          <defval>&quot;linear&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the qth percentile of the data along the specified axis, while ignoring nan values.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanpercentile.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanpercentile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPercentile</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inInterpMethod</parametername>
</parameternamelist>
<parameterdescription>
<para>(default linear) choices = [&apos;linear&apos;,&apos;lower&apos;,&apos;higher&apos;,&apos;nearest&apos;,&apos;midpoint&apos;] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="618" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="5863" bodyend="6035"/>
        <references refid="namespacenc_1_1utils_1ab8f33a7e18654f6870deaa8f9c038195" compoundref="_utils_8hpp" startline="52" endline="59">nc::utils::essentiallyEqual</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
        <references refid="namespacenc_1ab3e511ec0e360b85ecbb2879f29fc829" compoundref="_methods_8hpp" startline="7775" endline="7780">sort</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" compoundref="_nd_array_8hpp" startline="1892" endline="1904">nc::NdArray&lt; dtype &gt;::item</references>
        <references refid="namespacenc_1_1constants_1af94758715a9a5157d7ca95ab89d390ac" compoundref="_constants_8hpp" startline="47">nc::constants::nan</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac41354272013b08c351434698e7d4642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nanprod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanprod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanprod.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanprod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="622" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6050" bodyend="6058"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1a88f46dc8521accf2c95e7eb898689ebf" compoundref="_methods_8hpp" startline="6815" endline="6818">prod</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5b60ee2c61a7a6bf2b368c15813f02fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nans</definition>
        <argsstring>(uint32 inSquareSize) noexcept</argsstring>
        <name>nans</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with nans. Only really works for dtype = float/double</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="624" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6070" bodyend="6073"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
        <references refid="namespacenc_1_1constants_1af94758715a9a5157d7ca95ab89d390ac" compoundref="_constants_8hpp" startline="47">nc::constants::nan</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad251f6c4255c25ca81c4f95e0f038033" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nans</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>nans</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with nans. Only really works for dtype = float/double</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="626" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6085" bodyend="6088"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
        <references refid="namespacenc_1_1constants_1af94758715a9a5157d7ca95ab89d390ac" compoundref="_constants_8hpp" startline="47">nc::constants::nan</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a25b14d82dd90b7642d296169e056b67c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nans</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>nans</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with nans. Only really works for dtype = float/double</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="628" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6100" bodyend="6103"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
        <references refid="namespacenc_1_1constants_1af94758715a9a5157d7ca95ab89d390ac" compoundref="_constants_8hpp" startline="47">nc::constants::nan</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a68f12fa3ab909c4b20ad7970bc4dd535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nans_like</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>nans_like</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with nans.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="631" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6115" bodyend="6120"/>
        <references refid="classnc_1_1_nd_array_1aa086dc380cbe6461dbfeeb75edbc6961" compoundref="_nd_array_8hpp" startline="2125" endline="2128">nc::NdArray&lt; dtype &gt;::nans</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nanstdev</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanstdev</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the standard deviation along the specified axis, while ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanstd.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanstd.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="634" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6135" bodyend="6213"/>
        <references refid="namespacenc_1ab422b1ce1e6f64bac61882f142373645" compoundref="_methods_8hpp" startline="5672" endline="5736">nanmean</references>
        <references refid="classnc_1_1_nd_array_1a4f5da296a91f836fa7627fad29828117" compoundref="_nd_array_8hpp" startline="1892" endline="1904">nc::NdArray&lt; dtype &gt;::item</references>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1_1utils_1aa83b87460956ee562b1ecaad9e0bb0f1" compoundref="_utils_8hpp" startline="82" endline="85">nc::utils::sqr</references>
        <references refid="namespacenc_1a9a5bc17befff20dbc4afab1633b1b1e0" compoundref="_methods_8hpp" startline="7811" endline="7819">sqrt</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <referencedby refid="namespacenc_1a6d8fc67276e548961c289ca82cf3e68a" compoundref="_methods_8hpp" startline="6251" endline="6254">nanvar</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a93998901718915088ee07495c0322c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::nansum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nansum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nansum.html">https://www.numpy.org/devdocs/reference/generated/numpy.nansum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="637" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6228" bodyend="6236"/>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="namespacenc_1a6c34c13f7c2b60982f2a25d7d5df6a22" compoundref="_methods_8hpp" startline="4765" endline="4775">isnan</references>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6d8fc67276e548961c289ca82cf3e68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::nanvar</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>nanvar</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the variance along the specified axis, while ignoring NaNs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nanvar.html">https://www.numpy.org/devdocs/reference/generated/numpy.nanvar.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="640" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6251" bodyend="6254"/>
        <references refid="namespacenc_1a89f2697e04a5f8e42075265c72219b88" compoundref="_methods_8hpp" startline="7850" endline="7858">square</references>
        <references refid="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" compoundref="_methods_8hpp" startline="6135" endline="6213">nanstdev</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a66464387c8d92793b5355e2afd107cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenc_1a25da52a834e7af0e341d1503ebb62dcd" kindref="member">uint64</ref></type>
        <definition>uint64 nc::nbytes</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>nbytes</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes held by the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="643" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6266" bodyend="6269"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1affc3d3665f4e132238fdd39bcf137f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>boost::python::numpy::ndarray</type>
        <definition>boost::python::numpy::ndarray nc::nc2Boost</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>nc2Boost</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from a NumCpp NdArray&lt;T&gt; to a boost ndarray</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ndarray </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="113" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="113" bodyend="127"/>
        <references refid="namespacenc_1ae2b224742bc8263190d451a44ebe5e34" compoundref="_methods_8hpp" startline="7526" endline="7529">shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_boost_ndarray_helper_1ad4fc3eab4bd169937224e18a39318094" compoundref="_boost_numpy_ndarray_helper_8hpp" startline="184" endline="187">nc::BoostNdarrayHelper::getArray</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad30d3f881b5375ed3b2941a7b88ea660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>pybind11::array_t&lt; dtype &gt;</type>
        <definition>pybind11::array_t&lt;dtype&gt; nc::nc2pybind</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, bool transferOwnership=true) noexcept</argsstring>
        <name>nc2pybind</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>transferOwnership</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>converts a numcpp <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> to numpy array using pybind bindings</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para>the input array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferOwnership</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to transfer ownership to python. Requires that the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> owns its data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pybind11::array_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="227" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="227" bodyend="243"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="namespacenc_1ae2b224742bc8263190d451a44ebe5e34" compoundref="_methods_8hpp" startline="7526" endline="7529">shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1a2fe5e5e6e6844dcc8576c597285c994f" compoundref="_nd_array_8hpp" startline="2378" endline="2381">nc::NdArray&lt; dtype &gt;::ownsInternalData</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a5dd1edf4ebb4de0e8ae38351385b68d4" compoundref="_nd_array_8hpp" startline="1633" endline="1637">nc::NdArray&lt; dtype &gt;::dataRelease</references>
        <references refid="classnc_1_1_nd_array_1ad102f8fe8139a17ede04f83a03007bf3" compoundref="_nd_array_8hpp" startline="1621" endline="1624">nc::NdArray&lt; dtype &gt;::data</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad31609dc9bda02826fdbe6b7b6303807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::negative</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>negative</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Numerical negative, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.negative.html">https://www.numpy.org/devdocs/reference/generated/numpy.negative.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="652" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6325" bodyend="6329"/>
        <references refid="classnc_1_1_nd_array_1aec355aa347578efbd9baceb062a145ae" compoundref="_nd_array_8hpp" startline="1485" endline="1488">nc::NdArray&lt; dtype &gt;::copy</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa9e935b20cfc837317372b5466338963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::newbyteorder</definition>
        <argsstring>(dtype inValue, Endian inEndianess) noexcept</argsstring>
        <name>newbyteorder</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
          <declname>inEndianess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the array with the same data viewed with a different byte order. only works for integer types, floating point types will not compile and you will be confused as to why...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inEndianess</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>inValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="646" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6286" bodyend="6290"/>
        <references refid="classnc_1_1_nd_array_1a7f0ba5d000ef7d60d51ead3d16f7046d" compoundref="_nd_array_8hpp" startline="2158" endline="2269">nc::NdArray&lt; dtype &gt;::newbyteorder</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a75ebcb2c2d18d8edb89d1222865d4ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::newbyteorder</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Endian inEndianess) noexcept</argsstring>
        <name>newbyteorder</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
          <declname>inEndianess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the array with the same data viewed with a different byte order. only works for integer types, floating point types will not compile and you will be confused as to why...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inEndianess</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="649" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6307" bodyend="6310"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a607cc22048b7c93a5d3ae7b41fb729d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt; uint32 &gt; nc::nonzero</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>nonzero</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the indices of the flattened array of the elements that are non-zero.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.nonzero.html">https://www.numpy.org/devdocs/reference/generated/numpy.nonzero.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="655" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6345" bodyend="6348"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a381304c3932800f38265d6486318d19e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::norm</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matrix or vector norm.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="658" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6361" bodyend="6364"/>
        <references refid="classnc_1_1_nd_array_1a9a8b5063ec64c9d0d9afdce057db77ea" compoundref="_nd_array_8hpp" startline="2308" endline="2360">nc::NdArray&lt; dtype &gt;::norm</references>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a3ba2fb2c68554ec78a0957dc1fd7752d" compoundref="_rotations_8hpp" startline="87" endline="94">nc::rotations::Quaternion::Quaternion</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a05f56f872438107587c8dea69950cf25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::not_equal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return (x1 != x2) element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.not_equal.html">https://www.numpy.org/devdocs/reference/generated/numpy.not_equal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="661" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6379" bodyend="6382"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7029eded803de3acb5a9d949c56db307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ones</definition>
        <argsstring>(uint32 inSquareSize) noexcept</argsstring>
        <name>ones</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with ones.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ones.html">https://www.numpy.org/devdocs/reference/generated/numpy.ones.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="664" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6396" bodyend="6399"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a59dd2eaa4234ab8653beb7bda2fb6b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ones</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>ones</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with ones.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ones.html">https://www.numpy.org/devdocs/reference/generated/numpy.ones.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="667" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6413" bodyend="6416"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a6cda3d052089c53c18f31cdc41c9e9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ones</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>ones</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with ones.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ones.html">https://www.numpy.org/devdocs/reference/generated/numpy.ones.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="670" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6430" bodyend="6433"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4bb4975aae4fb03107fbf2a3812ceb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ones_like</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>ones_like</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with ones.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ones_like.html">https://www.numpy.org/devdocs/reference/generated/numpy.ones_like.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="673" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6447" bodyend="6452"/>
        <references refid="classnc_1_1_nd_array_1a3ad9db206f43e27769e72752261c695c" compoundref="_nd_array_8hpp" startline="2367" endline="2370">nc::NdArray&lt; dtype &gt;::ones</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8c8e42bbbbb509664e1a7ee3c4641e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::pad</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint16 inPadWidth, dtype inPadValue)</argsstring>
        <name>pad</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a58dcfca0b29c16ffb4ca118b2a1cb399" kindref="member">uint16</ref></type>
          <declname>inPadWidth</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inPadValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pads an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.pad.html">https://www.numpy.org/devdocs/reference/generated/numpy.pad.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPadWidth</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPadValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="676" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6467" bodyend="6479"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1af4df4f7926dbd7543dbf97855a71764e" compoundref="_nd_array_8hpp" startline="1820" endline="1823">nc::NdArray&lt; dtype &gt;::fill</references>
        <references refid="classnc_1_1_nd_array_1afe758ef8867d56964efc5a67bf17e726" compoundref="_nd_array_8hpp" startline="2577" endline="2582">nc::NdArray&lt; dtype &gt;::put</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae8625a7837cbbe94256235e8599c1493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::partition</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inKth, Axis inAxis=Axis::NONE)</argsstring>
        <name>partition</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inKth</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rearranges the elements in the array in such a way that value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.partition.html">https://www.numpy.org/devdocs/reference/generated/numpy.partition.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inKth</parametername>
</parameternamelist>
<parameterdescription>
<para>kth element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="679" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6499" bodyend="6504"/>
        <references refid="classnc_1_1_nd_array_1afe2a5101c43fc9b3df55500364dfe477" compoundref="_nd_array_8hpp" startline="2399" endline="2449">nc::NdArray&lt; dtype &gt;::partition</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a70a98622a4f6890bd7794a3d6451561b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::percentile</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, double inPercentile, Axis inAxis=Axis::NONE, const std::string &amp;inInterpMethod=&quot;linear&quot;)</argsstring>
        <name>percentile</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inPercentile</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inInterpMethod</declname>
          <defval>&quot;linear&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the qth percentile of the data along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.percentile.html">https://www.numpy.org/devdocs/reference/generated/numpy.percentile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPercentile</parametername>
</parameternamelist>
<parameterdescription>
<para>percentile must be in the range [0, 100] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inInterpMethod</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) interpolation method linear: i + (j - i) * fraction, where fraction is the fractional part of the index surrounded by i and j. lower : i. higher : j. nearest : i or j, whichever is nearest. midpoint : (i + j) / 2. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="682" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6525" bodyend="6650"/>
        <references refid="namespacenc_1_1utils_1ab8f33a7e18654f6870deaa8f9c038195" compoundref="_utils_8hpp" startline="52" endline="59">nc::utils::essentiallyEqual</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <references refid="namespacenc_1a74f030ff1819d46d4d1424c06cc6d2ee" compoundref="_methods_8hpp" startline="3779" endline="3788">floor</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="namespacenc_1ab3e511ec0e360b85ecbb2879f29fc829" compoundref="_methods_8hpp" startline="7775" endline="7780">sort</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8fcacbc0f7af820742c7596462a20924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::power</definition>
        <argsstring>(dtype inValue, uint8 inExponent) noexcept</argsstring>
        <name>power</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inExponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input integer power</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value raised to the power </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="686" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6664" bodyend="6667"/>
        <references refid="namespacenc_1accb66c153866ca430e3f2ce0386f92eb" compoundref="_methods_8hpp" startline="6703" endline="6718">power</references>
        <referencedby refid="classnc_1_1_poly1d_1a16f1c9b8cddcfcf8999277d6446251e1" compoundref="_polynomial_8hpp" startline="128" endline="138">nc::Poly1d&lt; dtype &gt;::str</referencedby>
        <referencedby refid="classnc_1_1_poly1d_1a7eed4e24b0713965446130e44d2d30f4" compoundref="_polynomial_8hpp" startline="159" endline="169">nc::Poly1d&lt; dtype &gt;::operator()</referencedby>
        <referencedby refid="classnc_1_1_poly1d_1a496d984bfae45cadae3665cea6b3d7c9" compoundref="_polynomial_8hpp" startline="333" endline="353">nc::Poly1d&lt; dtype &gt;::operator^=</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abb4e955fc425c9fd8e460a0eab0a6072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::power</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inExponent) noexcept</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inExponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input integer power</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="689" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6681" bodyend="6689"/>
        <references refid="namespacenc_1accb66c153866ca430e3f2ce0386f92eb" compoundref="_methods_8hpp" startline="6703" endline="6718">power</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1accb66c153866ca430e3f2ce0386f92eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::power</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; uint8 &gt; &amp;inExponents)</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>inExponents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input integer powers</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponents</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="692" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6703" bodyend="6718"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1a8fcacbc0f7af820742c7596462a20924" compoundref="_methods_8hpp" startline="6664" endline="6667">power</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2e4d491d77aa38680c0ccef22441b1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::powerf</definition>
        <argsstring>(dtype inValue, double inExponent) noexcept</argsstring>
        <name>powerf</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inExponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input floating point power</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value raised to the power </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="695" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6732" bodyend="6735"/>
        <references refid="namespacenc_1a1f02091675774ae0efe674f3cba7e172" compoundref="_methods_8hpp" startline="6771" endline="6786">powerf</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a38c38f2b36700d891ccbf81329bed54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::powerf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, double inExponent) noexcept</argsstring>
        <name>powerf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inExponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input floating point power</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="698" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6749" bodyend="6757"/>
        <references refid="namespacenc_1a1f02091675774ae0efe674f3cba7e172" compoundref="_methods_8hpp" startline="6771" endline="6786">powerf</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1f02091675774ae0efe674f3cba7e172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::powerf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; double &gt; &amp;inExponents)</argsstring>
        <name>powerf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>inExponents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the elements of the array to the input floating point powers</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.power.html">https://www.numpy.org/devdocs/reference/generated/numpy.power.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inExponents</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="701" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6771" bodyend="6786"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1a2e4d491d77aa38680c0ccef22441b1b2" compoundref="_methods_8hpp" startline="6732" endline="6735">powerf</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aafebf0f02106dfcc3ac3edbb4aa8b59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::print</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the array to the console.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="704" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6798" bodyend="6801"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a88f46dc8521accf2c95e7eb898689ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::prod</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>prod</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the product of array elements over a given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.prod.html">https://www.numpy.org/devdocs/reference/generated/numpy.prod.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="707" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6815" bodyend="6818"/>
        <referencedby refid="namespacenc_1ac41354272013b08c351434698e7d4642" compoundref="_methods_8hpp" startline="6050" endline="6058">nanprod</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad4ca6be792286734daa3d91fc5bcc9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::ptp</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>ptp</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Range of values (maximum - minimum) along an axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ptp.html">https://www.numpy.org/devdocs/reference/generated/numpy.ptp.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="710" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6832" bodyend="6835"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab9fd9301390e35e8aead617c2c24dd7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::put</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; uint32 &gt; &amp;inIndices, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces specified elements of an array with given values. The indexing works on the flattened target array</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.put.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="713" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6851" bodyend="6855"/>
        <references refid="classnc_1_1_nd_array_1afe758ef8867d56964efc5a67bf17e726" compoundref="_nd_array_8hpp" startline="2577" endline="2582">nc::NdArray&lt; dtype &gt;::put</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a067d9482aba483287169730b7d42ae0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::putmask</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; bool &gt; &amp;inMask, dtype inValue)</argsstring>
        <name>putmask</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes elements of an array based on conditional and input values.</para><para>Sets a.flat[n] = values[n] for each n where mask.flat[n] == True.</para><para>If values is not the same size as a and mask then it will repeat.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.putmask.html">https://www.numpy.org/devdocs/reference/generated/numpy.putmask.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="716" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6874" bodyend="6878"/>
        <references refid="classnc_1_1_nd_array_1a15899cfb75a560409f474826d960fec2" compoundref="_nd_array_8hpp" startline="2858" endline="2868">nc::NdArray&lt; dtype &gt;::putMask</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a024bd17e5b9f66ea7bb757a162be375d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::putmask</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const NdArray&lt; bool &gt; &amp;inMask, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>putmask</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes elements of an array based on conditional and input values.</para><para>Sets a.flat[n] = values[n] for each n where mask.flat[n] == True.</para><para>If values is not the same size as a and mask then it will repeat.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.putmask.html">https://www.numpy.org/devdocs/reference/generated/numpy.putmask.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="719" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6897" bodyend="6901"/>
        <references refid="classnc_1_1_nd_array_1a15899cfb75a560409f474826d960fec2" compoundref="_nd_array_8hpp" startline="2858" endline="2868">nc::NdArray&lt; dtype &gt;::putMask</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9e90b53998009ca25fab17910fb6e82a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::pybind2nc</definition>
        <argsstring>(pybind11::array_t&lt; dtype, pybind11::array::c_style &gt; &amp;numpyArray)</argsstring>
        <name>pybind2nc</name>
        <param>
          <type>pybind11::array_t&lt; dtype, pybind11::array::c_style &gt; &amp;</type>
          <declname>numpyArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>converts a numpy array to a numcpp <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> using pybind bindings Python will still own the underlying data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numpyArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;dtype&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="190" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="190" bodyend="215"/>
        <references refid="namespacenc_1a25f36ba02112a206936fae22b0724bb9" compoundref="_methods_8hpp" startline="7758" endline="7761">size</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a08f4ef3bf79eaa0944f869a4013940e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::rad2deg</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>rad2deg</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from radians to degrees.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.rad2deg.html">https://www.numpy.org/devdocs/reference/generated/numpy.rad2deg.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="722" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6916" bodyend="6919"/>
        <references refid="namespacenc_1_1constants_1a2f1219a120c9cc1434486d9de75a8221" compoundref="_constants_8hpp" startline="46">nc::constants::pi</references>
        <referencedby refid="classnc_1_1coordinates_1_1_coordinate_1a9fd37a2cb2c3b45aee933e4e5f95d074" compoundref="_coordinates_8hpp" startline="596" endline="599">nc::coordinates::Coordinate::degreeSeperation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3dd7ad21130c11676cf2d292c0f0e11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::rad2deg</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>rad2deg</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from radians to degrees.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.rad2deg.html">https://www.numpy.org/devdocs/reference/generated/numpy.rad2deg.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="725" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6934" bodyend="6942"/>
        <referencedby refid="namespacenc_1ad643a144992a26ebab228cbcc0833039" compoundref="_methods_8hpp" startline="2828" endline="2831">degrees</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a362034446d04a8dc9468b5a90f6998c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::radians</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>radians</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.radians.html">https://www.numpy.org/devdocs/reference/generated/numpy.radians.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="728" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6956" bodyend="6959"/>
        <references refid="namespacenc_1abc6d4ba6f504c4eaee656f8c071c5103" compoundref="_methods_8hpp" startline="2806" endline="2814">deg2rad</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a66f8e8d8f43d565bf5c709184627f11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::radians</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>radians</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert angles from degrees to radians.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.radians.html">https://www.numpy.org/devdocs/reference/generated/numpy.radians.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="731" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6973" bodyend="6976"/>
        <references refid="namespacenc_1abc6d4ba6f504c4eaee656f8c071c5103" compoundref="_methods_8hpp" startline="2806" endline="2814">deg2rad</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa30825d04d9afa89e8ab434535c56cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::reciprocal</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>reciprocal</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the reciprocal of the argument, element-wise.</para><para>Calculates 1 / x.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.reciprocal.html">https://www.numpy.org/devdocs/reference/generated/numpy.reciprocal.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="734" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="6993" bodyend="7003"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a12bfc5b4d937aa0366b70fb15270bd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::remainder</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>remainder</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return remainder of division.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.remainder.html">https://www.numpy.org/devdocs/reference/generated/numpy.remainder.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="737" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7018" bodyend="7021"/>
        <references refid="namespacenc_1abb157bedd0a3a4c5ee9d7dabc57cfde1" compoundref="_methods_8hpp" startline="7036" endline="7051">remainder</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abb157bedd0a3a4c5ee9d7dabc57cfde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::remainder</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>remainder</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return element-wise remainder of division.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.remainder.html">https://www.numpy.org/devdocs/reference/generated/numpy.remainder.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="740" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7036" bodyend="7051"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
        <referencedby refid="namespacenc_1a12bfc5b4d937aa0366b70fb15270bd41" compoundref="_methods_8hpp" startline="7018" endline="7021">remainder</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab05327f86b004d1109eb84255786fde6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::repeat</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.repeat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="743" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7067" bodyend="7070"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a74456399d0c5250f19b437ea6ac06f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::repeat</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const Shape &amp;inRepeatShape) noexcept</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inRepeatShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.repeat.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inRepeatShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="746" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7085" bodyend="7088"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a2d711099d8ee30a6e127aa946118bfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::reshape</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumRows, uint32 inNumCols)</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives a new shape to an array without changing its data.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.reshape.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="749" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7104" bodyend="7108"/>
        <references refid="classnc_1_1_nd_array_1a597b9157af97d8be0d38403639aa4b02" compoundref="_nd_array_8hpp" startline="2957" endline="2969">nc::NdArray&lt; dtype &gt;::reshape</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a73096b21189fdc428553b7ab7a5ad556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::reshape</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const Shape &amp;inNewShape)</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inNewShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives a new shape to an array without changing its data.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.reshape.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNewShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="752" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7123" bodyend="7127"/>
        <references refid="classnc_1_1_nd_array_1a597b9157af97d8be0d38403639aa4b02" compoundref="_nd_array_8hpp" startline="2957" endline="2969">nc::NdArray&lt; dtype &gt;::reshape</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a23e62805f41c2c3878fd4cec22ae0593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::resizeFast</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>resizeFast</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="755" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7144" bodyend="7148"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae5244c329773c955dcf94b3120e8645d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::resizeFast</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const Shape &amp;inNewShape) noexcept</argsstring>
        <name>resizeFast</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inNewShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNewShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="758" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7164" bodyend="7168"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4aaa0d29fba0d537e19931efe21b2184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::resizeSlow</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>resizeSlow</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="761" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7187" bodyend="7191"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a276e498af952a840bf5fdf74f95cdbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt; dtype &gt; &amp; nc::resizeSlow</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;inArray, const Shape &amp;inNewShape) noexcept</argsstring>
        <name>resizeSlow</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inNewShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.resize.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNewShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="764" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7209" bodyend="7213"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3934a88b2bb7a4f3de0949eb00e3b4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::right_shift</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inNumBits) noexcept</argsstring>
        <name>right_shift</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inNumBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the bits of an integer to the right.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.right_shift.html">https://www.numpy.org/devdocs/reference/generated/numpy.right_shift.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumBits</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="767" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7228" bodyend="7231"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9ba33527dbca7d5482cf88899abd827d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::rint</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>rint</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round value to the nearest integer.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.rint.html">https://www.numpy.org/devdocs/reference/generated/numpy.rint.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="770" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7246" bodyend="7249"/>
        <references refid="namespacenc_1aad089cbed60089da7def17fd9b5d143b" compoundref="_methods_8hpp" startline="7264" endline="7272">rint</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aad089cbed60089da7def17fd9b5d143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::rint</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>rint</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round elements of the array to the nearest integer.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.rint.html">https://www.numpy.org/devdocs/reference/generated/numpy.rint.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="773" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7264" bodyend="7272"/>
        <referencedby refid="namespacenc_1a9ba33527dbca7d5482cf88899abd827d" compoundref="_methods_8hpp" startline="7246" endline="7249">rint</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7849bce8e073ce26bbb5d6082bf42f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::rms</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>rms</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the root mean square (RMS) along the specified axis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="776" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7285" bodyend="7288"/>
        <references refid="classnc_1_1_nd_array_1a6d2ac80b2f7b1fa818e33bd03d66a224" compoundref="_nd_array_8hpp" startline="3080" endline="3128">nc::NdArray&lt; dtype &gt;::rms</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acac1ebbc5e3f3ef8d09874f3fcf1b22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::roll</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int32 inShift, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>roll</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inShift</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roll array elements along a given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.roll.html">https://www.numpy.org/devdocs/reference/generated/numpy.roll.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inShift</parametername>
</parameternamelist>
<parameterdescription>
<para>(elements to shift, positive means forward, negative means backwards) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="779" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7304" bodyend="7364"/>
        <references refid="namespacenc_1a5251a8cc0a2a09fd87c66149e1172244" compoundref="_methods_8hpp" startline="984" endline="991">abs</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
        <references refid="classnc_1_1_nd_array_1a217adf4a530aa2bba221d89c3c5a96be" compoundref="_nd_array_8hpp" startline="943" endline="946">nc::NdArray&lt; dtype &gt;::end</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1afee9039247b1185f0d619017be3a6109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::rot90</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inK=1) noexcept</argsstring>
        <name>rot90</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inK</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate an array by 90 degrees counter clockwise in the plane.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.rot90.html">https://www.numpy.org/devdocs/reference/generated/numpy.rot90.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inK</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of times to rotate 90 degrees</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="782" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7379" bodyend="7403"/>
        <references refid="namespacenc_1a649f515cc6211ba022413fb3f59c3957" compoundref="_methods_8hpp" startline="3745" endline="3748">flipud</references>
        <references refid="namespacenc_1a2763bc1a854320a7f0b190b0578fc4d2" compoundref="_methods_8hpp" startline="3681" endline="3714">flip</references>
        <references refid="namespacenc_1ad18044535b3dddd0d8ffd10ae41ac396" compoundref="_methods_8hpp" startline="3728" endline="3731">fliplr</references>
        <referencedby refid="namespacenc_1_1filter_1a6b257d6e403f5f9003934a4fd1fb5feb" compoundref="_filter_8hpp" startline="880" endline="911">nc::filter::convolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a41f18de9a9c6b9ae0b2053a22400baba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::round</definition>
        <argsstring>(dtype inValue, uint8 inDecimals=0) noexcept</argsstring>
        <name>round</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round value to the given number of decimals.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="785" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7416" bodyend="7420"/>
        <references refid="classnc_1_1_nd_array_1a3f1c7b94cf5f2b2beb961ef426e0e29f" compoundref="_nd_array_8hpp" startline="3142" endline="3159">nc::NdArray&lt; dtype &gt;::round</references>
        <referencedby refid="classnc_1_1rotations_1_1_d_c_m_1a54aee041952dac8c6c0b19c765b87f0a" compoundref="_rotations_8hpp" startline="895" endline="905">nc::rotations::DCM&lt; dtype &gt;::isValid</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a17488aafca1cf8f27267297d98595c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::round</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint8 inDecimals=0) noexcept</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a60efb2c7acad2ac3a9a9fcf1e93d0f49" kindref="member">uint8</ref></type>
          <declname>inDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round an array to the given number of decimals.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="788" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7433" bodyend="7436"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4d53bca44b0a1ec255de0bc72d048bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::row_stack</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList)</argsstring>
        <name>row_stack</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stack arrays in sequence vertically (row wise).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para>{list} of arrays to stack</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="791" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7449" bodyend="7488"/>
        <references refid="classnc_1_1_shape_1abcd1dafbc4c959f49d40b70d78a3ef2c" compoundref="_shape_8hpp" startline="115" endline="118">nc::Shape::isnull</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <referencedby refid="namespacenc_1a6848af2d5c509218538f48808241b1b1" compoundref="_methods_8hpp" startline="2319" endline="2356">concatenate</referencedby>
        <referencedby refid="namespacenc_1ad802c086d7fbd7d07e0fd98b38ea351c" compoundref="_methods_8hpp" startline="7872" endline="7891">stack</referencedby>
        <referencedby refid="namespacenc_1a13d295b5ed47008096684efbc255e263" compoundref="_methods_8hpp" startline="8782" endline="8785">vstack</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac02087737cabe80234ec24c3cb5c70ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::setdiff1d</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>setdiff1d</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the set difference of two arrays.</para><para>Return the sorted, unique values in ar1 that are not in ar2.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.setdiff1d.html">https://www.numpy.org/devdocs/reference/generated/numpy.setdiff1d.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="794" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7504" bodyend="7514"/>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ae2b224742bc8263190d451a44ebe5e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape nc::shape</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>shape</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the shape of the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="797" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7526" bodyend="7529"/>
        <referencedby refid="namespacenc_1affc3d3665f4e132238fdd39bcf137f53" compoundref="_python_interface_8hpp" startline="113" endline="127">nc2Boost</referencedby>
        <referencedby refid="namespacenc_1ad30d3f881b5375ed3b2941a7b88ea660" compoundref="_python_interface_8hpp" startline="227" endline="243">nc2pybind</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4a5d98f334e0b50a3cf9c2718485e5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenc_1a0002211f73639f83890a15f3e9ba0fba" kindref="member">int8</ref></type>
        <definition>int8 nc::sign</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sign</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an element-wise indication of the sign of a number.</para><para>The sign function returns - 1 if x &lt; 0, 0 if x == 0, 1 if x &gt; 0. nan is returned for nan inputs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sign.html">https://www.numpy.org/devdocs/reference/generated/numpy.sign.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="800" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7546" bodyend="7560"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1a1a02bd2ccb906a225485af72bdbc32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1a0002211f73639f83890a15f3e9ba0fba" kindref="member">int8</ref> &gt;</type>
        <definition>NdArray&lt; int8 &gt; nc::sign</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an element-wise indication of the sign of a number.</para><para>The sign function returns - 1 if x &lt; 0, 0 if x == 0, 1 if x &gt; 0. nan is returned for nan inputs.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sign.html">https://www.numpy.org/devdocs/reference/generated/numpy.sign.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="803" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7577" bodyend="7585"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af6dcbdfea85cdc84b4ddcf6c978b71f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::signbit</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>signbit</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns element-wise True where signbit is set (less than zero).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.signbit.html">https://www.numpy.org/devdocs/reference/generated/numpy.signbit.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="806" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7599" bodyend="7602"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1af00ee77fbee7b0f3140415c86ce6da2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt; bool &gt; nc::signbit</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>signbit</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns element-wise True where signbit is set (less than zero).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.signbit.html">https://www.numpy.org/devdocs/reference/generated/numpy.signbit.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="809" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7616" bodyend="7624"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a0d66dc207eb871bba26bff4838992fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::sin</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sin</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric sine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sin.html">https://www.numpy.org/devdocs/reference/generated/numpy.sin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="812" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7638" bodyend="7641"/>
        <references refid="namespacenc_1a760a49cda7b6533710be858a20e40bb5" compoundref="_methods_8hpp" startline="7655" endline="7663">sin</references>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1aafb38c20ae954808d18179e227223bd9" compoundref="_rotations_8hpp" startline="129" endline="148">nc::rotations::Quaternion::angleAxisRotation</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a7a39f199e4d1ad773b93c69e66ae0415" compoundref="_rotations_8hpp" startline="456" endline="502">nc::rotations::Quaternion::slerp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a760a49cda7b6533710be858a20e40bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::sin</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigonometric sine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sin.html">https://www.numpy.org/devdocs/reference/generated/numpy.sin.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="815" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7655" bodyend="7663"/>
        <referencedby refid="namespacenc_1a0d66dc207eb871bba26bff4838992fef" compoundref="_methods_8hpp" startline="7638" endline="7641">sin</referencedby>
        <referencedby refid="namespacenc_1a72cc296d28dc1e45c0c2b5b323d5b668" compoundref="_methods_8hpp" startline="7679" endline="7683">sinc</referencedby>
        <referencedby refid="namespacenc_1aac5e942220c693fb9e65fcc3ff4fc50f" compoundref="_methods_8hpp" startline="8722" endline="8725">unwrap</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a72cc296d28dc1e45c0c2b5b323d5b668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::sinc</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sinc</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sinc function.</para><para>The sinc function is sin(pi*x) / (pi*x).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sinc.html">https://www.numpy.org/devdocs/reference/generated/numpy.sinc.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="818" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7679" bodyend="7683"/>
        <references refid="namespacenc_1a760a49cda7b6533710be858a20e40bb5" compoundref="_methods_8hpp" startline="7655" endline="7663">sin</references>
        <references refid="namespacenc_1_1constants_1a2f1219a120c9cc1434486d9de75a8221" compoundref="_constants_8hpp" startline="46">nc::constants::pi</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab1e8170e2906af8be294b2c22e0fa0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::sinc</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>sinc</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sinc function.</para><para>The sinc function is sin(pi*x) / (pi*x).</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sinc.html">https://www.numpy.org/devdocs/reference/generated/numpy.sinc.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="821" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7699" bodyend="7707"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab095a894082329d4a43e38bce13d7ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::sinh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sinh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hyperbolic sine.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sinh.html">https://www.numpy.org/devdocs/reference/generated/numpy.sinh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="824" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7721" bodyend="7724"/>
        <references refid="namespacenc_1a26a60f3151234bbc43a9e3f8472cb088" compoundref="_methods_8hpp" startline="7738" endline="7746">sinh</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a26a60f3151234bbc43a9e3f8472cb088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::sinh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hyperbolic sine, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sinh.html">https://www.numpy.org/devdocs/reference/generated/numpy.sinh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="827" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7738" bodyend="7746"/>
        <referencedby refid="namespacenc_1ab095a894082329d4a43e38bce13d7ff4" compoundref="_methods_8hpp" startline="7721" endline="7724">sinh</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a25f36ba02112a206936fae22b0724bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::size</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>size</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of elements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32 size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="830" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7758" bodyend="7761"/>
        <referencedby refid="namespacenc_1a9e90b53998009ca25fab17910fb6e82a" compoundref="_python_interface_8hpp" startline="190" endline="215">pybind2nc</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ab3e511ec0e360b85ecbb2879f29fc829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::sort</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a sorted copy of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sort.html">https://www.numpy.org/devdocs/reference/generated/numpy.sort.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="833" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7775" bodyend="7780"/>
        <references refid="classnc_1_1_nd_array_1a0022f6849d04ff050f9c795477e98333" compoundref="_nd_array_8hpp" startline="3213" endline="3241">nc::NdArray&lt; dtype &gt;::sort</references>
        <referencedby refid="namespacenc_1_1filter_1a972e8e16448b6c4aab483b0e352d3e02" compoundref="_filter_8hpp" startline="1384" endline="1412">nc::filter::rankFilter</referencedby>
        <referencedby refid="namespacenc_1_1filter_1a543f334070e494f6fba9a943a832415e" compoundref="_filter_8hpp" startline="1429" endline="1446">nc::filter::rankFilter1d</referencedby>
        <referencedby refid="namespacenc_1acb0128da9c31422e62814a91d2075d9d" compoundref="_methods_8hpp" startline="4559" endline="4609">interp</referencedby>
        <referencedby refid="namespacenc_1a2cf08c4e457f7b13ce36325c5d72ab7e" compoundref="_methods_8hpp" startline="5863" endline="6035">nanpercentile</referencedby>
        <referencedby refid="namespacenc_1a70a98622a4f6890bd7794a3d6451561b" compoundref="_methods_8hpp" startline="6525" endline="6650">percentile</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a0022f6849d04ff050f9c795477e98333" compoundref="_nd_array_8hpp" startline="3213" endline="3241">nc::NdArray&lt; bool &gt;::sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acb264011e6e6cd182cc47f67018a6b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::sqrt</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sqrt</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the positive square-root of a value.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sqrt.html">https://www.numpy.org/devdocs/reference/generated/numpy.sqrt.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="836" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7794" bodyend="7797"/>
        <references refid="namespacenc_1a9a5bc17befff20dbc4afab1633b1b1e0" compoundref="_methods_8hpp" startline="7811" endline="7819">sqrt</references>
        <referencedby refid="classnc_1_1linalg_1_1_s_v_d_1ae0561bbc9633e436139258b0c70b98ba" compoundref="_linalg_8hpp" startline="99" endline="110">nc::linalg::SVD::SVD</referencedby>
        <referencedby refid="classnc_1_1linalg_1_1_s_v_d_1aa170c7ec6894fb30e115840d61bd58a1" compoundref="_linalg_8hpp" startline="158" endline="201">nc::linalg::SVD::solve</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a9a8b5063ec64c9d0d9afdce057db77ea" compoundref="_nd_array_8hpp" startline="2308" endline="2360">nc::NdArray&lt; bool &gt;::norm</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a6d2ac80b2f7b1fa818e33bd03d66a224" compoundref="_nd_array_8hpp" startline="3080" endline="3128">nc::NdArray&lt; bool &gt;::rms</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a276df134adac8fb7304bc951ef639b45" compoundref="_nd_array_8hpp" startline="3254" endline="3309">nc::NdArray&lt; bool &gt;::stdev</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a3ba2fb2c68554ec78a0957dc1fd7752d" compoundref="_rotations_8hpp" startline="87" endline="94">nc::rotations::Quaternion::Quaternion</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1a2006b918951028c977fd975e63c486ab" compoundref="_rotations_8hpp" startline="284" endline="350">nc::rotations::Quaternion::fromDCM</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9a5bc17befff20dbc4afab1633b1b1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::sqrt</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the positive square-root of an array, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sqrt.html">https://www.numpy.org/devdocs/reference/generated/numpy.sqrt.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="839" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7811" bodyend="7819"/>
        <referencedby refid="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" compoundref="_methods_8hpp" startline="6135" endline="6213">nanstdev</referencedby>
        <referencedby refid="namespacenc_1acb264011e6e6cd182cc47f67018a6b3c" compoundref="_methods_8hpp" startline="7794" endline="7797">sqrt</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3d58d998049ad0356de1a6b8ad81c72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::square</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>square</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the square of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.square.html">https://www.numpy.org/devdocs/reference/generated/numpy.square.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="842" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7833" bodyend="7836"/>
        <references refid="namespacenc_1_1utils_1aa83b87460956ee562b1ecaad9e0bb0f1" compoundref="_utils_8hpp" startline="82" endline="85">nc::utils::sqr</references>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1addcc7fb7b4acd4201e7f5b90ef207f4d" compoundref="_rotations_8hpp" startline="103" endline="117">nc::rotations::Quaternion::Quaternion</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a89f2697e04a5f8e42075265c72219b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::square</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the square of an array, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.square.html">https://www.numpy.org/devdocs/reference/generated/numpy.square.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="845" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7850" bodyend="7858"/>
        <referencedby refid="namespacenc_1a6d8fc67276e548961c289ca82cf3e68a" compoundref="_methods_8hpp" startline="6251" endline="6254">nanvar</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad802c086d7fbd7d07e0fd98b38ea351c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::stack</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList, Axis inAxis=Axis::ROW)</argsstring>
        <name>stack</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the variance along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.stack.html">https://www.numpy.org/devdocs/reference/generated/numpy.stack.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para>{list} of arrays to stack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>axis to stack the input NdArrays </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="848" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7872" bodyend="7891"/>
        <references refid="namespacenc_1a4d53bca44b0a1ec255de0bc72d048bf2" compoundref="_methods_8hpp" startline="7449" endline="7488">row_stack</references>
        <references refid="namespacenc_1a1fd4b60fc74fcb37dff8faa08e877241" compoundref="_methods_8hpp" startline="2266" endline="2305">column_stack</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a16cc213a6ea059202635bbc3aabedc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::stdev</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>stdev</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the standard deviation along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.std.html">https://www.numpy.org/devdocs/reference/generated/numpy.std.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="851" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7905" bodyend="7908"/>
        <references refid="classnc_1_1_nd_array_1a276df134adac8fb7304bc951ef639b45" compoundref="_nd_array_8hpp" startline="3254" endline="3309">nc::NdArray&lt; dtype &gt;::stdev</references>
        <referencedby refid="classnc_1_1_nd_array_1a24135dd7a7713cb02ac260e70d458e23" compoundref="_nd_array_8hpp" startline="3557" endline="3563">nc::NdArray&lt; bool &gt;::var</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::sum</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of array elements over a given axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.sum.html">https://www.numpy.org/devdocs/reference/generated/numpy.sum.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="854" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7922" bodyend="7925"/>
        <referencedby refid="namespacenc_1a171381462e430870904ae2a24ce2541a" compoundref="_methods_8hpp" startline="1852" endline="1931">average</referencedby>
        <referencedby refid="namespacenc_1ab422b1ce1e6f64bac61882f142373645" compoundref="_methods_8hpp" startline="5672" endline="5736">nanmean</referencedby>
        <referencedby refid="namespacenc_1abc8a093e9b2b3ec34bcb602c64976b60" compoundref="_methods_8hpp" startline="6135" endline="6213">nanstdev</referencedby>
        <referencedby refid="namespacenc_1a93998901718915088ee07495c0322c06" compoundref="_methods_8hpp" startline="6228" endline="6236">nansum</referencedby>
        <referencedby refid="namespacenc_1a12e7a847f3a0a663f04c11e494a77e7e" compoundref="_methods_8hpp" startline="8140" endline="8199">trapz</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1af46899aa9486c6189a0db53228774f76" compoundref="_nd_array_8hpp" startline="3481" endline="3522">nc::NdArray&lt; bool &gt;::trace</referencedby>
        <referencedby refid="classnc_1_1rotations_1_1_quaternion_1addcc7fb7b4acd4201e7f5b90ef207f4d" compoundref="_rotations_8hpp" startline="103" endline="117">nc::rotations::Quaternion::Quaternion</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a874072504b77c6f56a0f7c80ca175705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::swapaxes</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>swapaxes</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interchange two axes of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.swapaxes.html">https://www.numpy.org/devdocs/reference/generated/numpy.swapaxes.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="857" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7939" bodyend="7942"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a12bb2c0891c334e603cd1510facba22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::tan</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>tan</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute tangent.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tan.html">https://www.numpy.org/devdocs/reference/generated/numpy.tan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="860" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7956" bodyend="7959"/>
        <references refid="namespacenc_1ac985b92780cb7ccb02fec2b8b1a0fed0" compoundref="_methods_8hpp" startline="7973" endline="7981">tan</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac985b92780cb7ccb02fec2b8b1a0fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::tan</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute tangent element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tan.html">https://www.numpy.org/devdocs/reference/generated/numpy.tan.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="863" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7973" bodyend="7981"/>
        <referencedby refid="namespacenc_1a12bb2c0891c334e603cd1510facba22a" compoundref="_methods_8hpp" startline="7956" endline="7959">tan</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a41bb95f5d62c593e84a9c97013d01bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::tanh</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>tanh</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute hyperbolic tangent.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tanh.html">https://www.numpy.org/devdocs/reference/generated/numpy.tanh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="866" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="7995" bodyend="7998"/>
        <references refid="namespacenc_1a099297154fd4ed63a95bafcf5d717792" compoundref="_methods_8hpp" startline="8012" endline="8020">tanh</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a099297154fd4ed63a95bafcf5d717792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::tanh</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute hyperbolic tangent element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tanh.html">https://www.numpy.org/devdocs/reference/generated/numpy.tanh.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="869" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8012" bodyend="8020"/>
        <referencedby refid="namespacenc_1a41bb95f5d62c593e84a9c97013d01bea" compoundref="_methods_8hpp" startline="7995" endline="7998">tanh</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4e342ec4b643155b1aafd3f5b89623a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::tile</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>tile</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an array by repeating A the number of times given by reps.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tile.html">https://www.numpy.org/devdocs/reference/generated/numpy.tile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="872" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8035" bodyend="8038"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a3f8ca00408c4209b23634380f5eb0c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::tile</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const Shape &amp;inReps) noexcept</argsstring>
        <name>tile</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inReps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an array by repeating A the number of times given by reps.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tile.html">https://www.numpy.org/devdocs/reference/generated/numpy.tile.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inReps</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="875" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8052" bodyend="8055"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4a3f6b571a0b4761515a67f98957de2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::tofile</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const std::string &amp;inFilename, const std::string &amp;inSep=&quot;&quot;)</argsstring>
        <name>tofile</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inSep</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write array to a file as text or binary (default).. The data produced by this method can be recovered using the function <ref refid="namespacenc_1af884ea4beb54b9a18bc116fe40ec4b7b" kindref="member">fromfile()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSep</parametername>
</parameternamelist>
<parameterdescription>
<para>(Separator between array items for text output. If �� (empty), a binary file is written) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="878" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8070" bodyend="8073"/>
        <references refid="classnc_1_1_nd_array_1aa94662d12c0f3558fa78344c8cfe95cd" compoundref="_nd_array_8hpp" startline="3421" endline="3455">nc::NdArray&lt; dtype &gt;::tofile</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5f01d5eb73eab70467f884e421ad2e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; dtype &gt;</type>
        <definition>std::vector&lt; dtype &gt; nc::toStlVector</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>toStlVector</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write flattened array to an STL vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="881" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8085" bodyend="8088"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4a75035db8c766b2cececb1f3e4d5b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::trace</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int16 inOffset=0, Axis inAxis=Axis::ROW) noexcept</argsstring>
        <name>trace</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a7ef41205a09ddd32ee926953ad8145c1" kindref="member">int16</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum along diagonals of the array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trace.html">https://www.numpy.org/devdocs/reference/generated/numpy.trace.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(Offset from main diaganol, default = 0, negative=above, positve=below) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default ROW) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="884" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8103" bodyend="8106"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a83a59c9f29b6b5e8660c7d258ce3ea83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::transpose</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Permute the dimensions of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.transpose.html">https://www.numpy.org/devdocs/reference/generated/numpy.transpose.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="887" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8121" bodyend="8124"/>
        <referencedby refid="namespacenc_1a326882675fa52ea7e0e266373e844e3e" compoundref="_methods_8hpp" startline="8420" endline="8423">triu</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1ab1dfe260680abf6a8cc4fdf56c1b15c2" compoundref="_nd_array_8hpp" startline="3354" endline="3392">nc::NdArray&lt; bool &gt;::sum</referencedby>
        <referencedby refid="classnc_1_1_nd_array_1a843ebed50d1fae2993e4716e0adf17ed" compoundref="_nd_array_8hpp" startline="3403" endline="3406">nc::NdArray&lt; bool &gt;::swapaxes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a12e7a847f3a0a663f04c11e494a77e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::trapz</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, double dx=1.0, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>trapz</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dx</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integrate along the given axis using the composite trapezoidal rule.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trapz.html">https://www.numpy.org/devdocs/reference/generated/numpy.trapz.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional defaults to 1.0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="890" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8140" bodyend="8199"/>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4d3e8e18ea6e0a61cfcda1711cce9e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::trapz</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArrayY, const NdArray&lt; dtype &gt; &amp;inArrayX, Axis inAxis=Axis::NONE)</argsstring>
        <name>trapz</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayY</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integrate along the given axis using the composite trapezoidal rule.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trapz.html">https://www.numpy.org/devdocs/reference/generated/numpy.trapz.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayY</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="893" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8215" bodyend="8287"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="namespacenc_1abbe8cdd4ceb0820083d1f57001d2f01c" compoundref="_methods_8hpp" startline="7922" endline="7925">sum</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
        <references refid="classnc_1_1_nd_array_1aae29c9fbae3e92ce432703ffd7722d8b" compoundref="_nd_array_8hpp" startline="3533" endline="3544">nc::NdArray&lt; dtype &gt;::transpose</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ad1850d44c56b5a13ae13d44e4bbeae83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::tril</definition>
        <argsstring>(uint32 inN, int32 inOffset=0) noexcept</argsstring>
        <name>tril</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An array with ones at and below the given diagonal and zeros elsewhere.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows and cols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and below which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="896" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8303" bodyend="8332"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a16b464bc314efb2183be62a4346f32fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::tril</definition>
        <argsstring>(uint32 inN, uint32 inM, int32 inOffset=0) noexcept</argsstring>
        <name>tril</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inM</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An array with ones at and below the given diagonal and zeros elsewhere.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inM</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and below which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="899" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8349" bodyend="8378"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa8c48ea18ba4dce93b75dc9bb0882e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::tril</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int32 inOffset=0) noexcept</argsstring>
        <name>tril</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lower triangle of an array.</para><para>Return a copy of an array with elements above the k - th diagonal zeroed.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.tril.html">https://www.numpy.org/devdocs/reference/generated/numpy.tril.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows and cols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and below which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="902" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8398" bodyend="8404"/>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a13182724941436fd30dd1516dcb003aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::trim_zeros</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, const std::string inTrim=&quot;fb&quot;)</argsstring>
        <name>trim_zeros</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>inTrim</declname>
          <defval>&quot;fb&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trim the leading and/or trailing zeros from a 1-D array or sequence.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trim_zeros.html">https://www.numpy.org/devdocs/reference/generated/numpy.trim_zeros.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inTrim</parametername>
</parameternamelist>
<parameterdescription>
<para>(&quot;f&quot; = front, &quot;b&quot; = back, &quot;fb&quot; = front and back)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="914" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8513" bodyend="8614"/>
        <references refid="namespacenc_1a8fc2a8a065e4a00776255876d40c7d61" compoundref="_methods_8hpp" startline="2386" endline="2389">copy</references>
        <references refid="classnc_1_1_nd_array_1a6871de7968fa26f32d9c43167cd66131" compoundref="_nd_array_8hpp" startline="3197" endline="3200">nc::NdArray&lt; dtype &gt;::size</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a90547fcd7b438dd9e0d77d2f8fd3036d" compoundref="_nd_array_8hpp" startline="886" endline="889">nc::NdArray&lt; dtype &gt;::begin</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a326882675fa52ea7e0e266373e844e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::triu</definition>
        <argsstring>(uint32 inN, int32 inOffset=0) noexcept</argsstring>
        <name>triu</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An array with ones at and above the given diagonal and zeros elsewhere.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows and cols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and above which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="905" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8420" bodyend="8423"/>
        <references refid="namespacenc_1a83a59c9f29b6b5e8660c7d258ce3ea83" compoundref="_methods_8hpp" startline="8121" endline="8124">transpose</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1acc5de905ab2bb273cb01a4fd3fd357df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::triu</definition>
        <argsstring>(uint32 inN, uint32 inM, int32 inOffset=0) noexcept</argsstring>
        <name>triu</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inN</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inM</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An array with ones at and above the given diagonal and zeros elsewhere.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inN</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inM</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and above which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="908" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8440" bodyend="8472"/>
        <references refid="classnc_1_1_nd_array_1a3ad9db206f43e27769e72752261c695c" compoundref="_nd_array_8hpp" startline="2367" endline="2370">nc::NdArray&lt; dtype &gt;::ones</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa9142bfbdbfd81f2bd0d6c093a359ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::triu</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int32 inOffset=0) noexcept</argsstring>
        <name>triu</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1ae1001b41fda4e17eb2dd197b4bfa56df" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Upper triangle of an array.</para><para>Return a copy of an array with elements below the k - th diagonal zeroed.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.triu.html">https://www.numpy.org/devdocs/reference/generated/numpy.triu.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows and cols </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>(the sub-diagonal at and below which the array is filled. k = 0 is the main diagonal, while k &lt; 0 is below it, and k &gt; 0 is above. The default is 0.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="911" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8492" bodyend="8498"/>
        <references refid="classnc_1_1_shape_1a6f89f699dea6eb89eef19e00c92b223a" compoundref="_shape_8hpp" startline="46">nc::Shape::rows</references>
        <references refid="classnc_1_1_shape_1aae1a3c997648aacaefb60d0e6d0bf10d" compoundref="_shape_8hpp" startline="47">nc::Shape::cols</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac83a50ef99e61f116a86df98196f4a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::trunc</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>trunc</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truncated value of the input.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trunc.html">https://www.numpy.org/devdocs/reference/generated/numpy.trunc.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="917" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8629" bodyend="8632"/>
        <references refid="namespacenc_1a8a226f07c6993cf37d33c57b3033ea6c" compoundref="_methods_8hpp" startline="8647" endline="8655">trunc</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a8a226f07c6993cf37d33c57b3033ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::trunc</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>trunc</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the truncated value of the input, element-wise.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.trunc.html">https://www.numpy.org/devdocs/reference/generated/numpy.trunc.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="920" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8647" bodyend="8655"/>
        <referencedby refid="namespacenc_1ac83a50ef99e61f116a86df98196f4a8b" compoundref="_methods_8hpp" startline="8629" endline="8632">trunc</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a9dc5a706d1cbeb822ace82eac5ace756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::union1d</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray1, const NdArray&lt; dtype &gt; &amp;inArray2)</argsstring>
        <name>union1d</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray1</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the union of two arrays.</para><para>Return the unique, sorted array of values that are in either of the two input arrays.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.union1d.html">https://www.numpy.org/devdocs/reference/generated/numpy.union1d.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="923" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8673" bodyend="8685"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
        <references refid="classnc_1_1_nd_array_1afab8bb1ff84015deae6dc7ed74a68227" compoundref="_nd_array_8hpp" startline="1001" endline="1004">nc::NdArray&lt; dtype &gt;::cbegin</references>
        <references refid="classnc_1_1_nd_array_1a01305da9771c34f86b419379ee986f3e" compoundref="_nd_array_8hpp" startline="1034" endline="1037">nc::NdArray&lt; dtype &gt;::cend</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a4ff98c91846a1eda6681ea2ef476d06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::unique</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>unique</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the unique elements of an array.</para><para>Returns the sorted unique elements of an array.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.unique.html">https://www.numpy.org/devdocs/reference/generated/numpy.unique.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="926" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8702" bodyend="8706"/>
        <referencedby refid="namespacenc_1a90d99a9f0f7927372ae5fdc8fd3c0469" compoundref="_methods_8hpp" startline="2861" endline="2951">deleteIndices</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aac5e942220c693fb9e65fcc3ff4fc50f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::unwrap</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>unwrap</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unwrap by changing deltas between values to 2*pi complement. Unwraps to [-pi, pi].</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.unwrap.html">https://www.numpy.org/devdocs/reference/generated/numpy.unwrap.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="929" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8722" bodyend="8725"/>
        <references refid="namespacenc_1a760a49cda7b6533710be858a20e40bb5" compoundref="_methods_8hpp" startline="7655" endline="7663">sin</references>
        <references refid="namespacenc_1a2f13c698853574855bd7f60076d706a8" compoundref="_methods_8hpp" startline="2467" endline="2475">cos</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a33324987d9f105f585ac96295635e599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::unwrap</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>unwrap</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unwrap by changing deltas between values to 2*pi complement. Unwraps to [-pi, pi].</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.unwrap.html">https://www.numpy.org/devdocs/reference/generated/numpy.unwrap.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="932" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8741" bodyend="8749"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a5e8d61ac187661b9e720a0a2d8e803f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt; double &gt; nc::var</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE) noexcept</argsstring>
        <name>var</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the variance along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.var.html">https://www.numpy.org/devdocs/reference/generated/numpy.var.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="935" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8764" bodyend="8767"/>
        <references refid="classnc_1_1_nd_array_1a24135dd7a7713cb02ac260e70d458e23" compoundref="_nd_array_8hpp" startline="3557" endline="3563">nc::NdArray&lt; dtype &gt;::var</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a1bd20e59dcfc31d93c1edee5ec6e89ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>boost::python::list</type>
        <definition>boost::python::list nc::vector2list</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;inVector) noexcept</argsstring>
        <name>vector2list</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>inVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>converts a std::vector to a boost python list</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVector</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boost::python::list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" line="150" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/PythonInterface.hpp" bodystart="150" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a13d295b5ed47008096684efbc255e263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::vstack</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inArrayList)</argsstring>
        <name>vstack</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inArrayList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the variance along the specified axis.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.vstack.html">https://www.numpy.org/devdocs/reference/generated/numpy.vstack.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayList</parametername>
</parameternamelist>
<parameterdescription>
<para>{list} of arrays to stack</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="938" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8782" bodyend="8785"/>
        <references refid="namespacenc_1a4d53bca44b0a1ec255de0bc72d048bf2" compoundref="_methods_8hpp" startline="7449" endline="7488">row_stack</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a7a526300e6258fc6a008cfabc53d679c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::where</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask, const NdArray&lt; dtype &gt; &amp;inA, const NdArray&lt; dtype &gt; &amp;inB)</argsstring>
        <name>where</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inA</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return elements, either from x or y, depending on the input mask. The output array contains elements of x where mask is True, and elements from y elsewhere.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.where.html">https://www.numpy.org/devdocs/reference/generated/numpy.where.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inA</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inB</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="941" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8801" bodyend="8836"/>
        <references refid="classnc_1_1_nd_array_1a232a5e8c426b629dcda9f9d52e8ce905" compoundref="_nd_array_8hpp" startline="3183" endline="3186">nc::NdArray&lt; dtype &gt;::shape</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1abfde704ef23d1c8d937f1afcc1622fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::zeros</definition>
        <argsstring>(uint32 inSquareSize) noexcept</argsstring>
        <name>zeros</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with zeros.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html">https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="944" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8850" bodyend="8853"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1aa10b71f168b0242f27bf45a4ec6ab573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::zeros</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) noexcept</argsstring>
        <name>zeros</name>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with zeros.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html">https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="947" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8867" bodyend="8870"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1ac104a21525c41f6b4e112f1ea0bbe685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::zeros</definition>
        <argsstring>(const Shape &amp;inShape) noexcept</argsstring>
        <name>zeros</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with zeros.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html">https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="950" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8884" bodyend="8887"/>
        <references refid="namespacenc_1a5f04a82ba16a9e6e929fd365398fd0c5" compoundref="_methods_8hpp" startline="4167" endline="4170">full</references>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1a310cfe27fe8db7b02c29ab07a917599a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt; dtype &gt; nc::zeros_like</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray) noexcept</argsstring>
        <name>zeros_like</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array of given shape and type, filled with zeros.</para><para>NumPy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.zeros_like.html">https://www.numpy.org/devdocs/reference/generated/numpy.zeros_like.html</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" line="953" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/Methods.hpp" bodystart="8901" bodyend="8906"/>
        <references refid="classnc_1_1_nd_array_1a0b337bf0d78b306fa0b874631f1bf24e" compoundref="_nd_array_8hpp" startline="3570" endline="3573">nc::NdArray&lt; dtype &gt;::zeros</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/src/NumCpp/BoostNumpyNdarrayHelper.hpp" line="46" column="1"/>
  </compounddef>
</doxygen>
